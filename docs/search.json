[
  {
    "objectID": "2024.html#part-1",
    "href": "2024.html#part-1",
    "title": "My 2024 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nimport os\nimport pandas as pd\n\ninput = pd.read_csv(\n    os.path.join(\"2024\", \"day_01\", \"input_day01.txt\"), sep=\"   \", header=None\n)\ninput.columns = [\"l1\", \"l2\"]\n\ndef part1(input):\n    l1 = list(input[\"l1\"])\n    l1.sort()\n    l2 = list(input[\"l2\"])\n    l2.sort()\n\n    df_lists = pd.DataFrame({\"l1\": l1, \"l2\": l2})\n    df_lists[\"diff\"] = abs(df_lists[\"l2\"] - df_lists[\"l1\"])\n\n    return df_lists[\"diff\"].sum()\n\n\nprint(part1(input))\n\n\n\n1258579\n\n\n0.574 seconds elapsed"
  },
  {
    "objectID": "2024.html#part-2",
    "href": "2024.html#part-2",
    "title": "My 2024 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nimport os\nimport pandas as pd\n\ninput = pd.read_csv(\n    os.path.join(\"2024\", \"day_01\", \"input_day01.txt\"), sep=\"   \", header=None\n)\ninput.columns = [\"l1\", \"l2\"]\n\ndef part2(input):\n    l1 = list(input[\"l1\"])\n    l2 = list(input[\"l2\"])\n\n    count_array = []\n    for value in l1:\n        count_array.append(value * l2.count(value))\n\n    return sum(count_array)\n\n\nprint(part2(input))\n\n\n\n23981443\n\n\n0.020 seconds elapsed"
  },
  {
    "objectID": "2024.html#part-1-1",
    "href": "2024.html#part-1-1",
    "title": "My 2024 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nimport os\n\ninput = open(os.path.join(\"2024\", \"day_02\", \"input_day02.txt\")).read().split(\"\\n\")\ninput = [[int(level) for level in report.split(\" \")] for report in input]\n\ndef check_if_save(report):\n    increasing = [report[i + 1] - report[i] for i in range(len(report) - 1)]\n    if set(increasing) &lt;= {1, 2, 3} or set(increasing) &lt;= {-1, -2, -3}:\n        return True\n    else:\n        return False\n\ndef part1(input):\n    n_safe = sum([check_if_save(report) for report in input])\n    return n_safe\n\n\nprint(part1(input))\n\n\n\n213\n\n\n0.016 seconds elapsed"
  },
  {
    "objectID": "2024.html#part-2-1",
    "href": "2024.html#part-2-1",
    "title": "My 2024 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nimport os\n\ninput = open(os.path.join(\"2024\", \"day_02\", \"input_day02.txt\")).read().split(\"\\n\")\ninput = [[int(level) for level in report.split(\" \")] for report in input]\n\ndef check_if_save(report):\n    increasing = [report[i + 1] - report[i] for i in range(len(report) - 1)]\n    if set(increasing) &lt;= {1, 2, 3} or set(increasing) &lt;= {-1, -2, -3}:\n        return True\n    else:\n        return False\n\ndef part2(input):\n    n_safe = sum(\n        [\n            any(\n                [\n                    check_if_save(report[:i] + report[i + 1 :])\n                    for i in range(len(report))\n                ]\n            )\n            for report in input\n        ]\n    )\n    return n_safe\n\n\nprint(part2(input))\n\n\n\n285\n\n\n0.023 seconds elapsed"
  },
  {
    "objectID": "2024.html#part-1-2",
    "href": "2024.html#part-1-2",
    "title": "My 2024 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nimport os\nimport re\nimport math\n\ninput = open(os.path.join(\"2024\", \"day_03\", \"input_day03.txt\")).read()\n\ndef get_multiplications(input):\n    mul_strings = re.findall(r\"mul\\(\\d+,\\d+\\)\", input)\n    mul_vals = [[int(s) for s in re.findall(r\"\\d+\", mul)] for mul in mul_strings]\n    mults = [math.prod(x) for x in mul_vals]\n    mult_sum = sum(mults)\n    return mult_sum\n\ndef part1(input):\n    mult_sum = get_multiplications(input)\n    return mult_sum\n\n\nprint(part1(input))\n\n\n\n167090022\n\n\n0.014 seconds elapsed"
  },
  {
    "objectID": "2024.html#part-2-2",
    "href": "2024.html#part-2-2",
    "title": "My 2024 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nimport os\nimport re\nimport math\n\ninput = open(os.path.join(\"2024\", \"day_03\", \"input_day03.txt\")).read()\n\ndef get_multiplications(input):\n    mul_strings = re.findall(r\"mul\\(\\d+,\\d+\\)\", input)\n    mul_vals = [[int(s) for s in re.findall(r\"\\d+\", mul)] for mul in mul_strings]\n    mults = [math.prod(x) for x in mul_vals]\n    mult_sum = sum(mults)\n    return mult_sum\n\ndef part2(input):\n    input_cleaned = \" \".join(sec.split(\"don't()\")[0] for sec in input.split(\"do()\"))\n    mult_sum = get_multiplications(input_cleaned)\n    return mult_sum\n\n\nprint(part2(input))\n\n\n\n89823704\n\n\n0.011 seconds elapsed"
  },
  {
    "objectID": "2024.html#part-1-3",
    "href": "2024.html#part-1-3",
    "title": "My 2024 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nimport os\nimport re\n\ninput = open(os.path.join(\"2024\", \"day_04\", \"input_day04.txt\")).read()\ninput = input.split(\"\\n\")\n\ndef match(matrix, pattern, width):\n    matches = 0\n    for i in range(len(matrix) - width + 1):\n        for j in range(len(matrix[i]) - width + 1):\n            block = \"\".join(matrix[i + x][j : j + width] for x in range(width))\n            matches += bool(re.match(pattern, block))\n\n    return matches\n\ndef part1(input):\n    word_n = 0\n    for rotation in range(4):\n        word_n += sum(row.count(\"XMAS\") for row in input)\n        word_n += match(input, r\"X.{4}M.{4}A.{4}S\", 4)\n\n        input = [\"\".join(row[::-1]) for row in zip(*input)]\n\n    return word_n\n\n\nprint(part1(input))\n\n\n\n2591\n\n\n0.143 seconds elapsed"
  },
  {
    "objectID": "2024.html#part-2-3",
    "href": "2024.html#part-2-3",
    "title": "My 2024 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nimport os\nimport re\n\ninput = open(os.path.join(\"2024\", \"day_04\", \"input_day04.txt\")).read()\ninput = input.split(\"\\n\")\n\ndef match(matrix, pattern, width):\n    matches = 0\n    for i in range(len(matrix) - width + 1):\n        for j in range(len(matrix[i]) - width + 1):\n            block = \"\".join(matrix[i + x][j : j + width] for x in range(width))\n            matches += bool(re.match(pattern, block))\n\n    return matches\n\ndef part2(input):\n    word_n = 0\n    for rotation in range(4):\n        word_n += match(input, r\"M.M.A.S.S\", 3)\n\n        input = [\"\".join(row[::-1]) for row in zip(*input)]\n\n    return word_n\n\n\nprint(part2(input))\n\n\n\n1880\n\n\n0.127 seconds elapsed"
  },
  {
    "objectID": "2024.html#part-1-4",
    "href": "2024.html#part-1-4",
    "title": "My 2024 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nimport os\nimport re\nfrom functools import reduce\nfrom itertools import product\nfrom operator import add, mul\n\ninput = open(os.path.join(\"2024\", \"day_07\", \"input_day07.txt\")).read()\ninput = [list(map(int, re.findall(r\"(\\d+)\", x))) for x in input.splitlines()]\n\ndef check_equation(equation, operators):\n    test_val, nums = equation[0], equation[1:]\n    for ops in product(operators, repeat=(len(nums) - 1)):\n        if reduce(lambda k, x: x[0](k, x[1]), zip(ops, nums[1:]), nums[0]) == test_val:\n            return True\n    return False\n\ndef part1(input):\n    cal_result = sum(eq[0] for eq in input if check_equation(eq, (add, mul)))\n    return cal_result\n\n\nprint(part1(input))\n\n\n\n7885693428401\n\n\n0.405 seconds elapsed"
  },
  {
    "objectID": "2024.html#part-2-4",
    "href": "2024.html#part-2-4",
    "title": "My 2024 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nimport os\nimport re\nfrom functools import reduce\nfrom itertools import product\nfrom operator import add, mul\n\ninput = open(os.path.join(\"2024\", \"day_07\", \"input_day07.txt\")).read()\ninput = [list(map(int, re.findall(r\"(\\d+)\", x))) for x in input.splitlines()]\n\ndef check_equation(equation, operators):\n    test_val, nums = equation[0], equation[1:]\n    for ops in product(operators, repeat=(len(nums) - 1)):\n        if reduce(lambda k, x: x[0](k, x[1]), zip(ops, nums[1:]), nums[0]) == test_val:\n            return True\n    return False\n\ndef _concat(a, b):\n    a *= 10 ** len(str(b))\n    return a + b\n\n\ndef part2(input):\n    cal_result = sum(eq[0] for eq in input if check_equation(eq, (add, mul, _concat)))\n\n    return cal_result\n\n\nprint(part2(input))\n\n\n\n348360680516005\n\n\n27.656 seconds elapsed"
  },
  {
    "objectID": "2024.html#part-1-5",
    "href": "2024.html#part-1-5",
    "title": "My 2024 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nimport os\n\ninput = open(os.path.join(\"2024\", \"day_08\", \"input_day08.txt\")).read().splitlines()\ninput = [list(line) for line in input]\n\ndef get_pair_antinodes_pt1(antinodes, n, m, x_i, y_i, x_j, y_j):\n    dx = x_j - x_i\n    dy = y_j - y_i\n    if x_i - dx &gt;= 0 and y_i - dy &gt;= 0 and y_i - dy &lt; m:\n        antinodes.add((x_i - dx, y_i - dy))\n    if x_j + dx &lt; n and y_j + dy &lt; m and y_j + dy &gt;= 0:\n        antinodes.add((x_j + dx, y_j + dy))\n\n\ndef part1(input):\n    n = len(input)\n    m = len(input[0])\n    antinodes = set()\n\n    antenna_locations = {}\n    for i in range(n):\n        for j in range(m):\n            if input[i][j] != \".\":\n                c = input[i][j]\n                antenna_locations[c] = antenna_locations.get(c, []) + [(i, j)]\n    for freq, antenna in antenna_locations.items():\n        if len(antenna) &lt; 2:\n            continue\n        for i in range(len(antenna) - 1):\n            for j in range(i + 1, len(antenna)):\n                x_i, y_i = antenna[i]\n                x_j, y_j = antenna[j]\n                get_pair_antinodes_pt1(antinodes, n, m, x_i, y_i, x_j, y_j)\n    return len(antinodes)\n\n\nprint(part1(input))\n\n\n\n308\n\n\n0.011 seconds elapsed"
  },
  {
    "objectID": "2024.html#part-2-5",
    "href": "2024.html#part-2-5",
    "title": "My 2024 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nimport os\n\ninput = open(os.path.join(\"2024\", \"day_08\", \"input_day08.txt\")).read().splitlines()\ninput = [list(line) for line in input]\n\ndef get_pair_antinodes_pt2(antinodes, n, m, x_i, y_i, x_j, y_j):\n    dx = x_j - x_i\n    dy = y_j - y_i\n    multiplier = 0\n    while (\n        x_i - multiplier * dx &gt;= 0\n        and y_i - multiplier * dy &gt;= 0\n        and y_i - multiplier * dy &lt; m\n    ):\n        antinodes_new = antinodes.add((x_i - multiplier * dx, y_i - multiplier * dy))\n        multiplier += 1\n    multiplier = 0\n    while (\n        x_j + multiplier * dx &lt; n\n        and y_j + multiplier * dy &lt; m\n        and y_j + multiplier * dy &gt;= 0\n    ):\n        antinodes_new = antinodes.add((x_j + multiplier * dx, y_j + multiplier * dy))\n        multiplier += 1\n\n    return antinodes_new\n\n\ndef part2(input):\n    n = len(input)\n    m = len(input[0])\n    antinodes = set()\n\n    antenna_locations = {}\n    for i in range(n):\n        for j in range(m):\n            if input[i][j] != \".\":\n                c = input[i][j]\n                antenna_locations[c] = antenna_locations.get(c, []) + [(i, j)]\n    for freq, antenna in antenna_locations.items():\n        if len(antenna) &lt; 2:\n            continue\n        for i in range(len(antenna) - 1):\n            for j in range(i + 1, len(antenna)):\n                x_i, y_i = antenna[i]\n                x_j, y_j = antenna[j]\n                get_pair_antinodes_pt2(antinodes, n, m, x_i, y_i, x_j, y_j)\n    return len(antinodes)\n\n\nprint(part2(input))\n\n\n\n1147\n\n\n0.009 seconds elapsed"
  },
  {
    "objectID": "2023.html#part-1",
    "href": "2023.html#part-1",
    "title": "My 2023 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nimport pandas as pd\nimport re\n\ninput = pd.read_table(\"2023/day_01/input_day01.txt\", names=[\"string\"])\n\ndef day1(input, pt2=False):\n    if pt2:\n        input[\"string\"] = input[\"string\"].apply(lambda k: _translate(k))\n\n    input[\"first_num\"] = input[\"string\"].apply(lambda k: re.search(r\"\\d+\", k).group())\n    input[\"first_num\"] = input[\"first_num\"].str[0]\n    input[\"last_num\"] = input[\"string\"].apply(\n        lambda k: re.search(r\"\\d+\", k[::-1]).group()\n    )\n    input[\"last_num\"] = input[\"last_num\"].str[0]\n    input[\"value\"] = input[\"first_num\"] + input[\"last_num\"]\n\n    return input[\"value\"].astype(int).sum()\n\n\nprint(day1(input, pt2=False))\n\n\n\n55017\n\n\n0.928 seconds elapsed"
  },
  {
    "objectID": "2023.html#part-2",
    "href": "2023.html#part-2",
    "title": "My 2023 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nimport pandas as pd\nimport re\n\ninput = pd.read_table(\"2023/day_01/input_day01.txt\", names=[\"string\"])\n\nmapping = {\n    \"one\": \"1\",\n    \"two\": \"2\",\n    \"three\": \"3\",\n    \"four\": \"4\",\n    \"five\": \"5\",\n    \"six\": \"6\",\n    \"seven\": \"7\",\n    \"eight\": \"8\",\n    \"nine\": \"9\",\n}\n\n\ndef _translate(s):\n    for word in mapping:\n        s = s.replace(word, word[0] + mapping[word] + word[~0])\n    return s\n\n\ndef day1(input, pt2=False):\n    if pt2:\n        input[\"string\"] = input[\"string\"].apply(lambda k: _translate(k))\n\n    input[\"first_num\"] = input[\"string\"].apply(lambda k: re.search(r\"\\d+\", k).group())\n    input[\"first_num\"] = input[\"first_num\"].str[0]\n    input[\"last_num\"] = input[\"string\"].apply(\n        lambda k: re.search(r\"\\d+\", k[::-1]).group()\n    )\n    input[\"last_num\"] = input[\"last_num\"].str[0]\n    input[\"value\"] = input[\"first_num\"] + input[\"last_num\"]\n\n    return input[\"value\"].astype(int).sum()\n\n\nprint(day1(input, pt2=True))\n\n\n\n53539\n\n\n0.029 seconds elapsed"
  },
  {
    "objectID": "2023.html#part-1-1",
    "href": "2023.html#part-1-1",
    "title": "My 2023 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_delim(here::here(\"2023\", \"day_02\", \"input_day02.txt\"),\n  delim = \":\", col_names = c(\"game\", \"result\")\n)\n\ninput_parsed &lt;- input |&gt;\n  mutate(\n    result = str_trim(result),\n    game = parse_number(game),\n    cubes = str_extract_all(result, \"\\\\d+ [a-z]+\")\n  ) |&gt;\n  unnest(cubes) |&gt;\n  separate(cubes, c(\"number\", \"color\"), sep = \" \", convert = TRUE)\n\nmax_number &lt;- tribble(\n  ~color, ~max_value,\n  \"red\", 12,\n  \"green\", 13,\n  \"blue\", 14\n)\n\ninput_parsed |&gt;\n  inner_join(max_number, by = \"color\") |&gt;\n  group_by(game) |&gt;\n  filter(!any(number &gt; max_value)) |&gt;\n  distinct(game) |&gt;\n  pull(game) |&gt;\n  sum() |&gt;\n  print()\n\n\n\n[1] 2331\n\n\n0.357 sec elapsed"
  },
  {
    "objectID": "2023.html#part-2-1",
    "href": "2023.html#part-2-1",
    "title": "My 2023 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput &lt;- read_delim(here::here(\"2023\", \"day_02\", \"input_day02.txt\"),\n  delim = \":\", col_names = c(\"game\", \"result\")\n)\n\ninput_parsed &lt;- input |&gt;\n  mutate(\n    result = str_trim(result),\n    game = parse_number(game),\n    cubes = str_extract_all(result, \"\\\\d+ [a-z]+\")\n  ) |&gt;\n  unnest(cubes) |&gt;\n  separate(cubes, c(\"number\", \"color\"), sep = \" \", convert = TRUE)\n\ninput_parsed |&gt;\n  inner_join(max_number, by = \"color\") |&gt;\n  group_by(game, color) |&gt;\n  summarise(number = max(number)) |&gt;\n  summarise(power = prod(number)) |&gt;\n  pull(power) |&gt;\n  sum() |&gt;\n  print()\n\n\n\n[1] 71585\n\n\n0.093 sec elapsed"
  },
  {
    "objectID": "2023.html#part-1-2",
    "href": "2023.html#part-1-2",
    "title": "My 2023 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nimport os\nimport re\n\ninput = open(os.path.join(\"2023\", \"day_03\", \"input_day03.txt\"), \"r\").read().splitlines()\n\ndef part1(input):\n    padding = \".\" * len(input[0])\n    padded = [padding] + input\n    parts = []\n\n    for i in range(len(input)):\n        for match in re.finditer(r\"\\d+\", input[i]):\n            start, end = match.span()\n            start, end = max(start - 1, 0), min(end + 1, len(input[i]))\n            region = \"\".join([row[start:end] for row in padded[i : i + 3]])\n            if re.search(r\"[^.0-9]\", region):\n                parts.append(int(match.group(0)))\n\n    return sum(parts)\n\n\nprint(part1(input))\n\n\n\n538046\n\n\n0.014 seconds elapsed"
  },
  {
    "objectID": "2023.html#part-2-2",
    "href": "2023.html#part-2-2",
    "title": "My 2023 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nimport os\nimport re\n\ninput = open(os.path.join(\"2023\", \"day_03\", \"input_day03.txt\"), \"r\").read().splitlines()\n\ndef part2(input):\n    padding = \".\" * len(input[0])\n    padded = [padding] + input\n    gear_ratios = []\n\n    for i in range(len(input)):\n        for gear in re.finditer(r\"\\*\", input[i]):\n            numbers = []\n            for row in padded[i : i + 3]:\n                for n in re.finditer(r\"\\d+\", row):\n                    lower, upper = n.span()\n                    if lower - 1 &lt;= gear.start() &lt;= upper:\n                        numbers.append(int(n.group(0)))\n            if len(numbers) == 2:\n                gear_ratios.append(numbers[0] * numbers[1])\n\n    return sum(gear_ratios)\n\n\nprint(part2(input))\n\n\n\n81709807\n\n\n0.016 seconds elapsed"
  },
  {
    "objectID": "2023.html#part-1-3",
    "href": "2023.html#part-1-3",
    "title": "My 2023 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_delim(here::here(\"2023\", \"day_04\", \"input_day04.txt\"),\n  delim = \":\",\n  col_names = c(\"card\", \"numbers\")\n) |&gt;\n  mutate(numbers = str_trim(numbers))\n\ninput |&gt;\n  separate_wider_delim(\n    numbers,\n    delim = \"|\", names = c(\"winning\", \"hand\")\n  ) |&gt;\n  mutate(\n    across(everything(), str_trim),\n    across(everything(), ~ str_extract_all(.x, \"\\\\d+\")),\n    match = map2(winning, hand, intersect),\n    n_match = lengths(match)\n  ) |&gt;\n  filter(n_match &gt; 0) |&gt;\n  summarise(\n    points = sum(2^(n_match - 1))\n  ) |&gt;\n  pull(points) |&gt;\n  print()\n\n\n\n[1] 27059\n\n\n0.067 sec elapsed"
  },
  {
    "objectID": "2023.html#part-2-3",
    "href": "2023.html#part-2-3",
    "title": "My 2023 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput &lt;- read_delim(here::here(\"2023\", \"day_04\", \"input_day04.txt\"),\n  delim = \":\",\n  col_names = c(\"card\", \"numbers\")\n) |&gt;\n  mutate(numbers = str_trim(numbers))\n\ndata_games &lt;- input |&gt;\n  separate_wider_delim(\n    numbers,\n    delim = \"|\", names = c(\"winning\", \"hand\")\n  ) |&gt;\n  mutate(\n    across(everything(), str_trim),\n    across(everything(), ~ str_extract_all(.x, \"\\\\d+\")),\n    card = as.numeric(unlist(card)),\n    match = map2(winning, hand, intersect),\n    n_match = lengths(match)\n  ) |&gt;\n  rowwise() |&gt;\n  mutate(copies = ifelse(n_match &gt; 0, list(card + seq(n_match)), NA)) |&gt;\n  ungroup()\n\n\ncards &lt;- data_games |&gt; pull(card)\ncollect_scratchcards &lt;- list()\nwhile (!is.null(cards)) {\n  collect_scratchcards &lt;- append(collect_scratchcards, list(cards))\n  cards &lt;- data_games$copies[cards] |&gt; unlist()\n}\n\nprint(unlist(collect_scratchcards) |&gt; length())\n\n\n\n[1] 5744979\n\n\n0.885 sec elapsed"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Advent of Code",
    "section": "",
    "text": "2021 2022 2023 2024\n      Website design by Emil Hvitveldt"
  },
  {
    "objectID": "2021.html#part-1",
    "href": "2021.html#part-1",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ndata &lt;- read_table(\"./2021/day_01/input_day01.txt\", col_names = \"depth\")\n\ndata %&gt;% \n  mutate(depth_lag = lag(depth),\n         diff = depth - depth_lag,\n         diff_bin = diff / abs(diff)) %&gt;% \n  count(diff_bin)\n\ndata %&gt;% \n  mutate(depth_lag = lag(depth),\n         diff = depth - depth_lag,\n         diff_bin = diff / abs(diff),\n         diff_bin_label = case_when(diff_bin == -1 ~ \"Smaller than last\",\n                                    diff_bin == 1 ~ \"Larger than last\",\n                                    TRUE ~ \"No measurement/no difference\")) %&gt;% \n  count(diff_bin_label) %&gt;% \n  filter(str_detect(diff_bin_label, \"Larger\")) %&gt;% \n  pull(n) %&gt;% \n  print()\n\n\n\n[1] 1390\n\n\n0.159 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2",
    "href": "2021.html#part-2",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ndata &lt;- read_table(\"./2021/day_01/input_day01.txt\", col_names = \"depth\")\n\ndata %&gt;% \n  slider::slide(., ~.x, .after = 2, .f = ~sum(.x)) %&gt;% \n  enframe(name = \"window_no\", value = \"depth\") %&gt;% \n  unnest(depth) %&gt;% \n  mutate(depth_lag = lag(depth),\n         diff = depth - depth_lag,\n         diff_bin = diff / abs(diff),\n         diff_bin_label = case_when(diff_bin == -1 ~ \"Smaller than last\",\n                                    diff_bin == 1 ~ \"Larger than last\",\n                                    TRUE ~ \"No measurement/no difference\")) %&gt;% \n  count(diff_bin_label) %&gt;% \n  filter(str_detect(diff_bin_label, \"Larger\")) %&gt;% \n  pull(n) %&gt;% \n  print()\n\n\n\n[1] 1457\n\n\n0.219 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-1",
    "href": "2021.html#part-1-1",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ncommands &lt;- read_table(\"./2021/day_02/input_day02.txt\", \n                       col_names = c(\"direction\",\"value\"))\n\nfinal_position &lt;- commands %&gt;% \n  mutate(value_bin = case_when(direction == \"up\" ~ value * -1,\n                               TRUE ~ value),\n         direction_bin = case_when(direction == \"forward\" ~ \"x\",\n                                   TRUE ~ \"y\")) %&gt;% \n  group_by(direction_bin) %&gt;% \n  summarise(pos = sum(value_bin)) %&gt;% \n  ungroup()\n\nfinal_position %&gt;% \n  summarise(mult = prod(pos)) %&gt;% \n  pull(mult) %&gt;% \n  print()\n\n\n\n[1] 1654760\n\n\n0.025 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-1",
    "href": "2021.html#part-2-1",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ncommands &lt;- read_table(\"./2021/day_02/input_day02.txt\", \n                       col_names = c(\"direction\",\"value\"))\n\naim &lt;- depth &lt;- 0\nfor (i in seq(nrow(commands))) {\n  \n  t_direction &lt;- commands %&gt;% \n    slice(i) %&gt;% \n    pull(direction)\n  t_value &lt;- commands %&gt;% \n    slice(i) %&gt;% \n    pull(value)\n  \n  if (t_direction == \"forward\") {\n    depth &lt;- depth + (aim * t_value)\n  } else if (t_direction == \"down\") {\n    aim &lt;- aim + t_value\n  } else if (t_direction == \"up\") {\n    aim &lt;- aim - t_value\n  }\n  \n}\n\nfinal_position %&gt;% \n  filter(direction_bin == \"x\") %&gt;% \n  pull(pos) %&gt;% \n  prod(., depth) %&gt;% \n  print()\n\n\n\n[1] 1956047400\n\n\n2.342 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-2",
    "href": "2021.html#part-1-2",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(\"./2021/day_03/input_day03.txt\", col_names = \"full_binary\")\n\nn_bits &lt;- input %&gt;% \n  pull(full_binary) %&gt;% \n  nchar() %&gt;% \n  unique()\n\ninput_conv &lt;- input %&gt;% \n  separate(full_binary, into = str_glue(\"bit{seq(0,n_bits)}\"), sep = \"\") %&gt;% \n  select(-bit0) %&gt;% \n  pivot_longer(starts_with(\"bit\"), names_to = \"bit_no\") %&gt;%\n  mutate(value = as.numeric(value),\n         bit_no = parse_number(bit_no)) %&gt;% \n  group_by(bit_no) %&gt;% \n  count(value)\n\ngamma_rate &lt;- input_conv %&gt;% \n  slice_max(n) %&gt;% \n  pull(value) %&gt;% \n  str_c(collapse = \"\")\n\ngamma_rate_dec &lt;- strtoi(gamma_rate, base = 2)\n\nepsilon_rate &lt;- input_conv %&gt;% \n  slice_min(n) %&gt;% \n  pull(value) %&gt;% \n  str_c(collapse = \"\")\n\nepsilon_rate_dec &lt;- strtoi(epsilon_rate, base = 2)\n\nprint(gamma_rate_dec * epsilon_rate_dec)\n\n\n\n[1] 3148794\n\n\n0.09 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-2",
    "href": "2021.html#part-2-2",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(\"./2021/day_03/input_day03.txt\", col_names = \"full_binary\")\n\ninput_conv_wide &lt;- input %&gt;% \n  separate(full_binary, into = str_glue(\"bit{seq(0,n_bits)}\"), sep = \"\") %&gt;% \n  select(-bit0) %&gt;% \n  mutate(across(everything(), ~ as.numeric(.x)))\n\napply_rule &lt;- function(df, iteration, minmax = \"max\") {\n  \n  most_common &lt;- df %&gt;% \n    select(all_of(iteration)) %&gt;% \n    group_by(across(everything())) %&gt;% \n    count() %&gt;% \n    ungroup()\n  \n  if (minmax == \"max\") {\n    most_common &lt;- most_common %&gt;% \n      slice_max(n) %&gt;% \n      pull(1)\n  } else {\n    most_common &lt;- most_common %&gt;% \n      slice_min(n) %&gt;% \n      pull(1)\n  }\n  \n  if (length(most_common) &gt; 1) {\n    most_common &lt;- ifelse(minmax == \"max\", 1, 0)\n  }\n  \n  df &lt;- df %&gt;% \n    filter(across(iteration, ~ .x == most_common))\n  \n  return(df)\n  \n}\n\noxygen_rating &lt;- reduce(seq(n_bits), ~ apply_rule(.x, .y, minmax = \"max\"), \n                        .init = input_conv_wide) %&gt;% \n  as.numeric() %&gt;% \n  str_c(collapse = \"\") %&gt;% \n  strtoi(base = 2)\n\nco2_rating &lt;- reduce(seq(n_bits), ~ apply_rule(.x, .y, minmax = \"min\"), \n                     .init = input_conv_wide) %&gt;% \n  as.numeric() %&gt;% \n  str_c(collapse = \"\") %&gt;% \n  strtoi(base = 2)\n\nprint(oxygen_rating * co2_rating)\n\n\n\n[1] 2795310\n\n\n1.513 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-3",
    "href": "2021.html#part-1-3",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput_numbers &lt;- read_csv(\"./2021/day_04/input_day04.txt\", col_names = FALSE) %&gt;% \n  slice(1) %&gt;% \n  mutate(across(everything(), ~ as.numeric(.x))) %&gt;% \n  as_vector()\n\nboards &lt;- read_table(\"./2021/day_04/input_day04.txt\", skip = 2, \n                     col_names = FALSE, skip_empty_rows = TRUE) %&gt;% \n  rename_with(~ str_glue(\"col{parse_number(.x)}\")) %&gt;% \n  group_by(board_no = ceiling(row_number()/5)) %&gt;% \n  rownames_to_column(\"row_no\")\n\nn_boards &lt;- boards %&gt;%\n  ungroup() %&gt;% \n  slice_max(board_no) %&gt;% \n  pull(board_no) %&gt;% \n  unique()\n\nboards_long &lt;- boards %&gt;% \n  pivot_longer(starts_with(\"col\"), names_to = \"col_no\", values_to = \"number\") %&gt;% \n  mutate(col_no = parse_number(col_no)) %&gt;% \n  relocate(board_no, .after = last_col())\n\nrun_numbers &lt;- function(df, in_number, n_boards = NULL) {\n  \n  if (any(str_detect(names(df),\"final_number\"))) {\n    return(df)\n    stop()\n  }\n  \n  board_filt &lt;- df %&gt;% \n    filter(number != in_number)\n  \n  n_unique_rows &lt;- board_filt %&gt;% \n    count(row_no) %&gt;% \n    count(board_no) %&gt;% \n    pull(n)\n  \n  n_unique_cols &lt;- board_filt %&gt;% \n    count(col_no) %&gt;% \n    count(board_no) %&gt;% \n    pull(n)\n  \n  #print(in_number)\n  \n  if (sum(n_unique_rows * n_unique_cols) &lt; n_boards * 5 * 5) {\n    board_filt &lt;- df %&gt;% \n      mutate(final_number = in_number)\n    return(board_filt)\n  } else {\n    return(board_filt)\n  }\n  \n}\n\nbingo_game &lt;- reduce(input_numbers, ~ run_numbers(.x, .y, n_boards = n_boards), \n                     .init = boards_long)\n\nwinning_board &lt;- bingo_game %&gt;% \n  filter(number != final_number) %&gt;% \n  summarise(nrow = length(unique(row_no)),\n            ncol = length(unique(col_no))) %&gt;% \n  filter(nrow * ncol &lt; 25) %&gt;% \n  pull(board_no)\n\nbingo_game %&gt;% \n  ungroup() %&gt;% \n  filter(number != final_number,\n         board_no == winning_board) %&gt;% \n  summarise(sum_unmarked = sum(number),\n            final_number = unique(final_number)) %&gt;% \n  as_vector() %&gt;% \n  prod() %&gt;% \n  print()\n\n\n\n[1] 63424\n\n\n1.574 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-3",
    "href": "2021.html#part-2-3",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput_numbers &lt;- read_csv(\"./2021/day_04/input_day04.txt\", col_names = FALSE) %&gt;% \n  slice(1) %&gt;% \n  mutate(across(everything(), ~ as.numeric(.x))) %&gt;% \n  as_vector()\n\nboards &lt;- read_table(\"./2021/day_04/input_day04.txt\", skip = 2, \n                     col_names = FALSE, skip_empty_rows = TRUE) %&gt;% \n  rename_with(~ str_glue(\"col{parse_number(.x)}\")) %&gt;% \n  group_by(board_no = ceiling(row_number()/5)) %&gt;% \n  rownames_to_column(\"row_no\")\n\nn_boards &lt;- boards %&gt;%\n  ungroup() %&gt;% \n  slice_max(board_no) %&gt;% \n  pull(board_no) %&gt;% \n  unique()\n\nboards_long &lt;- boards %&gt;% \n  pivot_longer(starts_with(\"col\"), names_to = \"col_no\", values_to = \"number\") %&gt;% \n  mutate(col_no = parse_number(col_no)) %&gt;% \n  relocate(board_no, .after = last_col())\n\nrun_numbers &lt;- function(df, in_number, n_boards = NULL) {\n  \n  if (any(str_detect(names(df),\"final_number\"))) {\n    return(df)\n    stop()\n  }\n  \n  board_filt &lt;- df %&gt;% \n    filter(number != in_number)\n  \n  n_unique_rows &lt;- board_filt %&gt;% \n    count(row_no) %&gt;% \n    count(board_no) %&gt;% \n    pull(n)\n  \n  n_unique_cols &lt;- board_filt %&gt;% \n    count(col_no) %&gt;% \n    count(board_no) %&gt;% \n    pull(n)\n  \n  if (all(n_unique_rows * n_unique_cols &lt; 5 * 4 + 1)) {\n    board_filt &lt;- df %&gt;% \n      mutate(final_number = in_number)\n    return(board_filt)\n  } else {\n    return(board_filt)\n  }\n  \n}\n\nbingo_game &lt;- reduce(input_numbers, ~ run_numbers(.x, .y, n_boards = n_boards), \n                     .init = boards_long)\n\nlosing_board &lt;- bingo_game %&gt;% \n  summarise(nrow = length(unique(row_no)),\n            ncol = length(unique(col_no))) %&gt;% \n  filter(nrow * ncol == 5 * 5) %&gt;% \n  pull(board_no)\n\nbingo_game %&gt;% \n  ungroup() %&gt;% \n  filter(number != final_number,\n         board_no == losing_board) %&gt;% \n  summarise(sum_unmarked = sum(number),\n            final_number = unique(final_number)) %&gt;% \n  as_vector() %&gt;% \n  prod() %&gt;% \n  print()\n\n\n\n[1] 23541\n\n\n3.565 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-4",
    "href": "2021.html#part-1-4",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\nlibrary(showtext)\n\ninput &lt;- read_csv(here::here(\"2021\", \"day_05\",\"input_day05.txt\"), \n                  col_names = FALSE) %&gt;% \n  rename(x1 = X1,\n         y2 = X3) %&gt;% \n  separate(X2, into = c(\"y1\",\"x2\")) %&gt;% \n  mutate(across(everything(), ~ as.numeric(.x)))\n\nfont_add_google(\"Josefin Sans\", family = \"google\")\nshowtext_auto()\n\ninput %&gt;% \n  filter(x1 == x2 | y1 == y2) %&gt;% \n  rowid_to_column(\"segment_no\") %&gt;% \n  mutate(x_steps = map2(x1, x2, .f = seq),\n         y_steps = map2(y1, y2, .f = seq)) %&gt;% \n  select(segment_no, x_steps, y_steps) %&gt;% \n  unnest(c(x_steps, y_steps)) %&gt;% \n  count(x_steps, y_steps) %&gt;% \n  count(overlapping_segments = n &gt; 1) %&gt;% \n  filter(overlapping_segments) %&gt;% \n  pull(n) %&gt;% \n  print()\n\ninput %&gt;% \n  filter(x1 == x2 | y1 == y2) %&gt;% \n  rowid_to_column(\"segment_no\") %&gt;% \n  ggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, color = segment_no),\n               size = 1.5, alpha = 0.6, lineend = \"round\") + \n  labs(title = \"**Advent of Code - Day 5**\",\n       color = \"**Hydrothermal vent n&lt;sup&gt;o&lt;/sup&gt;**\") +\n  scico::scale_color_scico(palette = \"batlow\", breaks = c(1,seq(100,nrow(input), 100)), \n                           guide = guide_colorbar(title.position = \"top\", title.hjust = 0.5, \n                                                  barwidth = 10, barheight = 0.75, ticks = FALSE)) +\n  scale_y_reverse() +\n  theme_void(base_size = 24) + \n  theme(text = element_text(family = \"google\", color = \"grey90\"),\n        plot.title = ggtext::element_markdown(hjust = 0.5, size = 80,\n                                              margin = margin(rep(5,4), unit = \"pt\")),\n        legend.title = ggtext::element_markdown(margin = margin(b = -10, unit = \"pt\")),\n        legend.text = element_text(margin = margin(t = -10, \"pt\")),\n        legend.position = \"bottom\",\n        plot.margin = margin(rep(10,4), unit = \"mm\"),\n        plot.background = element_rect(fill = \"#0f0f23\"))\n\nggsave(here::here(\"2021\", \"day_05\", \"plot_day05.png\"), last_plot(), \n       height = 6, width = 8, dpi = 300)\n\n\n\n[1] 6572\n\n\n4.124 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-4",
    "href": "2021.html#part-2-4",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\nlibrary(showtext)\n\ninput &lt;- read_csv(here::here(\"2021\", \"day_05\",\"input_day05.txt\"), \n                  col_names = FALSE) %&gt;% \n  rename(x1 = X1,\n         y2 = X3) %&gt;% \n  separate(X2, into = c(\"y1\",\"x2\")) %&gt;% \n  mutate(across(everything(), ~ as.numeric(.x)))\n\nfont_add_google(\"Josefin Sans\", family = \"google\")\nshowtext_auto()\n\ninput %&gt;% \n  rowid_to_column(\"segment_no\") %&gt;% \n  mutate(x_steps = map2(x1, x2, .f = seq),\n         y_steps = map2(y1, y2, .f = seq)) %&gt;% \n  select(segment_no, x_steps, y_steps) %&gt;% \n  unnest(c(x_steps, y_steps)) %&gt;% \n  count(x_steps, y_steps) %&gt;% \n  count(overlapping_segments = n &gt; 1) %&gt;% \n  filter(overlapping_segments) %&gt;% \n  pull(n) %&gt;% \n  print()\n\n\n\n[1] 21466\n\n\n2.036 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-5",
    "href": "2021.html#part-1-5",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_csv(here::here(\"2021\", \"day_06\",\"input_day06.txt\"), \n                  col_names = FALSE) %&gt;% \n  unname() %&gt;% \n  as_vector()\n\nn_days &lt;- 80\n\ngen_fish &lt;- function(x, day) {\n  \n  n_new &lt;- sum(x == 0)\n  new_fish &lt;- rep(8,n_new)\n  \n  old_fish_repl &lt;- replace(x - 1, x - 1 &lt; 0, 6)\n  \n  new_fish_vector = c(old_fish_repl, new_fish)\n  \n  n_fish &lt;- length(new_fish_vector)\n  \n  #print(str_glue(\"Day {day}: {n_fish} fish\"))\n  \n  return(new_fish_vector)\n  \n}\n\nfinal_fish_vector &lt;- reduce(seq(n_days), ~ gen_fish(.x, .y), .init = input)\n\nprint(length(final_fish_vector))\n\n\n\n[1] 386640\n\n\n0.365 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-5",
    "href": "2021.html#part-2-5",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput &lt;- read_csv(here::here(\"2021\", \"day_06\",\"input_day06.txt\"), \n                  col_names = FALSE) %&gt;% \n  unname() %&gt;% \n  as_vector()\n\ndata &lt;- tabulate(input, nbins = 8) %&gt;% \n  c(0, .) %&gt;% \n  as_tibble() %&gt;% \n  rename(n = value) %&gt;% \n  mutate(value = row_number() - 1) %&gt;% \n  relocate(value, .before = 1)\n\nget_fish_count &lt;- function(x) {\n  \n  data_out &lt;- x %&gt;% \n    select(-n) %&gt;% \n    full_join(x %&gt;% mutate(value = value - 1), by = \"value\") %&gt;% \n    mutate(n = replace_na(n, 0))\n  \n  data_out$n[data_out$value == 6] &lt;- data_out %&gt;% \n    filter(value %in% c(-1,6)) %&gt;% \n    pull(n) %&gt;% \n    sum()\n  \n  data_out$n[data_out$value == 8] &lt;- data_out %&gt;%\n    filter(value == -1) %&gt;% \n    pull(n)\n  \n  data_out &lt;- data_out %&gt;% filter(value &gt;= 0)\n  \n  return(data_out)\n}\n\nfinal_fish_count &lt;- reduce(seq(256), ~ get_fish_count(.x), .init = data)\n\noptions(scipen = 999)\nfinal_fish_count %&gt;% \n  summarise(total_fish = sum(n)) %&gt;% \n  pull(total_fish) %&gt;% \n  print()\n\n\n\n[1] 1733403626279\n\n\n3.29 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-6",
    "href": "2021.html#part-1-6",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_csv(here::here(\"2021\",\"day_07\",\"input_day07.txt\"), \n                  col_names = FALSE) %&gt;% \n  unname() %&gt;% \n  as_vector()\n\ncalc_fuel &lt;- function(x, pos) {\n  fuel &lt;- tibble(\n    position = pos,\n    consumption = sum(abs(input - pos))\n  ) \n  return(fuel)\n}\n\nfuel &lt;- map_dfr(seq(0, max(input)), ~ calc_fuel(input, .x))\n\nfuel %&gt;% \n  slice_min(consumption) %&gt;% \n  pull(consumption) %&gt;% \n  print()\n\n\n\n[1] 328187\n\n\n1.641 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-6",
    "href": "2021.html#part-2-6",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput &lt;- read_csv(here::here(\"2021\",\"day_07\",\"input_day07.txt\"), \n                  col_names = FALSE) %&gt;% \n  unname() %&gt;% \n  as_vector()\n\ncalc_fuel &lt;- function(x, pos) {\n  \n  consumption &lt;-  abs(input - pos) %&gt;% \n    map_dbl(., ~ sum(seq(.x)))\n  \n  fuel &lt;- tibble(\n    position = pos,\n    consumption = sum(consumption)\n  ) \n  return(fuel)\n}\n\nfuel &lt;- map_dfr(seq(0, max(input)), ~ calc_fuel(input, .x))\n\nfuel %&gt;% \n  slice_min(consumption) %&gt;% \n  pull(consumption) %&gt;% \n  print()\n\n\n\n[1] 91257582\n\n\n16.047 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-7",
    "href": "2021.html#part-1-7",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_delim(here::here(\"2021\",\"day_08\",\"input_day08.txt\"), delim = \"|\", \n                    col_names = FALSE)\n\nnumbers &lt;- c(\"1\" = 2, \"4\" = 4, \"7\" = 3, \"8\" = 7)\n\ninput %&gt;% \n  select(output = X2) %&gt;% \n  mutate(output = str_trim(output)) %&gt;% \n  separate(output, into = str_glue(\"digit{seq(4)}\")) %&gt;% \n  mutate(across(everything(), ~ nchar(.x))) %&gt;% \n  pivot_longer(cols = everything(), names_to = \"digit\", \n               values_to = \"n_segments\") %&gt;% \n  filter(n_segments %in% numbers) %&gt;% \n  nrow() %&gt;% \n  print()\n\n\n\n[1] 294\n\n\n0.055 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-7",
    "href": "2021.html#part-2-7",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\nGot a lot of help from Emil Hvitveldt on this one. Reorganized his solution so I could make sense of it. This one hurt me 🤕\n\nlibrary(tidyverse)\n\ninput &lt;- read_delim(here::here(\"2021\",\"day_08\",\"input_day08.txt\"), delim = \"|\", \n                    col_names = FALSE)\n\nsplit_segments &lt;- function(x) {\n  x %&gt;% \n    str_split(., \" \") %&gt;%\n    map(., ~ str_split(.x, pattern = \"\")) %&gt;%\n    map(., ~ map(.x, ~ sort(.x)))\n}\n\ndata &lt;- input %&gt;%\n  rename(input = X1,\n         output = X2) %&gt;% \n  mutate(across(everything(), ~ str_trim(.x))) %&gt;% \n  mutate(across(c(\"input\", \"output\"), split_segments))\n\nsolver &lt;- function(input, output) {\n  \n  setdiff_length &lt;- function(x, y) {\n    lengths(map(x, ~setdiff(x[[which(y)]], .x)))\n  }\n  \n  x1 &lt;- lengths(input) == 2\n  x4 &lt;- lengths(input) == 4\n  x7 &lt;- lengths(input) == 3\n  x8 &lt;- lengths(input) == 7\n  x6 &lt;- lengths(input) == 6 & setdiff_length(input, x1) == 1\n  x0 &lt;- lengths(input) == 6 & setdiff_length(input, x4) == 1 & !x6\n  x9 &lt;- lengths(input) == 6 & !x6 & !x0\n  x5 &lt;- lengths(input) == 5 & setdiff_length(input, x6) == 1\n  x3 &lt;- lengths(input) == 5 & setdiff_length(input, x9) == 1 & !x5\n  x2 &lt;- lengths(input) == 5 & !x5 & !x3\n  \n  cont &lt;- list(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) %&gt;%\n    map(~ input[[which(.x)]]) %&gt;%\n    map(sort)\n  \n  output %&gt;%\n    match(cont) %&gt;%\n    magrittr::subtract(., 1) %&gt;%\n    str_c(collapse = \"\") %&gt;%\n    as.numeric()\n}\n\ndata %&gt;%\n  mutate(res = map2_dbl(input, output, ~ solver(.x, .y))) %&gt;%\n  summarise(sum = sum(res)) %&gt;% \n  pull(sum) %&gt;% \n  print()\n\n\n\n[1] 973292\n\n\n0.419 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-8",
    "href": "2021.html#part-1-8",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(here::here(\"2021\",\"day_09\",\"input_day09.txt\"), \n                    col_names = FALSE) %&gt;%\n  rename(value = X1)\n\nfull_table &lt;- input %&gt;% \n  separate(value, into = str_glue(\"coord{seq(0,10)}\"), sep = \"\") %&gt;% \n  mutate(across(everything(), ~ as.numeric(.x))) %&gt;% \n  rowid_to_column(\"row_no\") %&gt;% \n  add_row(tibble(row_no = c(0, nrow(.) + 1))) %&gt;% \n  mutate(across(everything(), ~ replace_na(.x, Inf)),\n         coord_last = Inf) %&gt;% \n  arrange(row_no)\n\nrow_wise_table &lt;- full_table %&gt;% \n  pivot_longer(starts_with(\"coord\"), names_to = \"column_no\") %&gt;% \n  group_by(column_no) %&gt;% \n  mutate(lag_value = lag(value),\n         lead_value = lead(value),\n         low_point_row = ifelse(value &lt; lag_value & value &lt; lead_value, \n                                yes = TRUE, no = FALSE)) %&gt;%\n  select(row_no, column_no, value, low_point_row)\n\ncol_wise_table &lt;- full_table %&gt;% \n  pivot_longer(starts_with(\"coord\"), names_to = \"column_no\") %&gt;% \n  group_by(row_no) %&gt;% \n  mutate(lag_value = lag(value),\n         lead_value = lead(value),\n         low_point_col = ifelse(value &lt; lag_value & value &lt; lead_value, \n                                yes = TRUE, no = FALSE)) %&gt;% \n  select(row_no, column_no, value, low_point_col)\n\n\ninner_join(col_wise_table, row_wise_table) %&gt;%\n  filter(low_point_col, low_point_row) %&gt;% \n  ungroup() %&gt;% \n  mutate(value = value + 1) %&gt;% \n  summarise(sum = sum(value)) %&gt;% \n  pull(sum) %&gt;% \n  print()\n\n\n\n[1] 128\n\n\n0.121 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-8",
    "href": "2021.html#part-2-8",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\nGot stuck here, and once I found this amazingly clever solution from Ildikó Czeller using {igraph}. I wanted to know how this worked, and then I learned from Jarosław Nirski about a similar solution using {tidygraph}, which is very neat:\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(here::here(\"2021\",\"day_09\",\"input_day09.txt\"), \n                    col_names = FALSE) %&gt;%\n  rename(value = X1)\n\ndata_long &lt;- input %&gt;% \n  rowid_to_column(\"row_no\") %&gt;% \n  separate_rows(value, sep = \"\", convert = TRUE) %&gt;% \n  filter(!is.na(value)) %&gt;% \n  group_by(row_no) %&gt;% \n  mutate(col_no = row_number()) %&gt;% \n  ungroup() %&gt;% \n  select(value, row_no, col_no)\n\ntidygraph::create_lattice(c(100, 100)) %&gt;%\n  mutate(!!!data_long) %&gt;%\n  filter(value != 9) %&gt;%\n  mutate(group = tidygraph::group_components()) %&gt;%\n  as_tibble() %&gt;%\n  count(group, sort = TRUE) %&gt;%\n  head(3) %&gt;%\n  pull(n) %&gt;%\n  prod()\n\n\n\n0.436 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-9",
    "href": "2021.html#part-1-9",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(here::here(\"2021\",\"day_10\",\"input_day10.txt\"), \n                    col_names = \"syntax\")\n\nfull_patterns &lt;- c(\"\\\\(\\\\)\",\"\\\\[\\\\]\",\"\\\\{\\\\}\",\"\\\\&lt;\\\\&gt;\")\n\nsymbols &lt;- tibble(symbols = c(\"(\",\"[\",\"{\",\"&lt;\",\")\",\"]\",\"}\",\"&gt;\"),\n                  valid = c(rep(TRUE, 4), rep(FALSE, 4)))\n\npoints &lt;- c(\")\" = 3, \"]\" = 57, \"}\" = 1197, \"&gt;\" = 25137) %&gt;% \n  enframe()\n\ninput %&gt;% \n  mutate(nchar = max(nchar(syntax))) %&gt;% \n  mutate(syntax = reduce(seq(nchar), .init = syntax,\n                         ~ str_remove_all(.x, str_c(full_patterns, \n                                                    collapse = \"|\")))) %&gt;% \n  mutate(symbols = str_split(syntax, \"\")) %&gt;% \n  unnest(symbols) %&gt;%\n  group_by(syntax) %&gt;% \n  mutate(position = row_number()) %&gt;% \n  left_join(symbols) %&gt;% \n  filter(!valid) %&gt;% \n  slice_min(position) %&gt;% \n  ungroup() %&gt;% \n  left_join(points, by = c(\"symbols\" = \"name\")) %&gt;% \n  summarise(total = sum(value)) %&gt;% \n  pull(total) %&gt;% \n  print()\n\n\n\n[1] 321237\n\n\n0.134 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-9",
    "href": "2021.html#part-2-9",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(here::here(\"2021\",\"day_10\",\"input_day10.txt\"), \n                    col_names = \"syntax\")\n\nfull_patterns &lt;- c(\"\\\\(\\\\)\",\"\\\\[\\\\]\",\"\\\\{\\\\}\",\"\\\\&lt;\\\\&gt;\")\n\nsymbols &lt;- tibble(symbols = c(\"(\",\"[\",\"{\",\"&lt;\",\")\",\"]\",\"}\",\"&gt;\"),\n                  valid = c(rep(TRUE, 4), rep(FALSE, 4)))\n\npoints &lt;- c(\")\" = 1, \"]\" = 2, \"}\" = 3, \"&gt;\" = 4) %&gt;% \n  enframe()\n\nfull_patterns &lt;- c(\"\\\\(\\\\)\",\"\\\\[\\\\]\",\"\\\\{\\\\}\",\"\\\\&lt;\\\\&gt;\")\n\npairs &lt;- tibble(open = c(\"(\",\"[\",\"{\",\"&lt;\"),\n                close = c(\")\",\"]\",\"}\",\"&gt;\"))\n\ncalc_score &lt;- function(scores) {\n  \n  tot_score &lt;- reduce(seq_along(scores), ~ .x * 5 + scores[.y], .init = 0)\n  return(tot_score)\n  \n}\n\ninput %&gt;% \n  mutate(nchar = max(nchar(syntax))) %&gt;% \n  mutate(syntax = reduce(seq(nchar), .init = syntax,\n                         ~ str_remove_all(.x, str_c(full_patterns, \n                                                    collapse = \"|\")))) %&gt;% \n  mutate(symbols = str_split(syntax, \"\")) %&gt;% \n  unnest(symbols) %&gt;%\n  group_by(syntax) %&gt;% \n  left_join(symbols) %&gt;% \n  filter(all(valid)) %&gt;% \n  mutate(inv_symbols = rev(symbols)) %&gt;% \n  left_join(pairs, by = c(\"inv_symbols\" = \"open\")) %&gt;% \n  mutate(close_syntax = str_c(close, collapse = \"\")) %&gt;% \n  left_join(points, by = c(\"close\" = \"name\")) %&gt;% \n  select(syntax,value) %&gt;% \n  nest(scores = value) %&gt;% \n  mutate(scores = map(scores, ~ as_vector(.x)),\n         tot_score = map_dbl(scores, ~ calc_score(.x))) %&gt;% \n  ungroup() %&gt;% \n  summarise(median_score = median(tot_score)) %&gt;% \n  pull(median_score) %&gt;% \n  print()\n\n\n\n[1] 2360030859\n\n\n0.316 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-10",
    "href": "2021.html#part-1-10",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput_paper &lt;- read_csv(here::here(\"2021\",\"day_13\",\"input_day13.txt\"), \n                        col_names = c(\"x\",\"y\"), n_max = 1004)\ninput_folds &lt;- read_delim(here::here(\"2021\",\"day_13\",\"input_day13.txt\"), \n                          delim = \"=\", \n                          col_names = c(\"fold_direction\", \"fold_loc\"), \n                          skip = 1005) %&gt;% \n  mutate(fold_direction = str_extract(fold_direction, \"[x|y]\"))\n\nfold_paper &lt;- function(df, instructions, step = 1) {\n  \n  dir &lt;- instructions %&gt;% \n    slice(step) %&gt;% \n    pull(fold_direction)\n  \n  loc &lt;- instructions %&gt;% \n    slice(step) %&gt;% \n    pull(fold_loc)\n  \n  folded_paper &lt;- df %&gt;% \n    mutate(x = if_else(x &lt;= loc | dir == \"y\", x, 2 * loc - x),\n           y = if_else(y &lt;= loc | dir == \"x\", y, 2 * loc - y)) %&gt;% \n    distinct(x, y)\n  \n  return(folded_paper)\n  \n}\n\nfold_paper(input_paper, input_folds) %&gt;% \n  count() %&gt;% \n  pull(n) %&gt;% \n  print()\n\n\n\n[1] 847\n\n\n0.13 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-10",
    "href": "2021.html#part-2-10",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput_paper &lt;- read_csv(here::here(\"2021\",\"day_13\",\"input_day13.txt\"), \n                        col_names = c(\"x\",\"y\"), n_max = 1004)\ninput_folds &lt;- read_delim(here::here(\"2021\",\"day_13\",\"input_day13.txt\"), \n                          delim = \"=\", \n                          col_names = c(\"fold_direction\", \"fold_loc\"), \n                          skip = 1005) %&gt;% \n  mutate(fold_direction = str_extract(fold_direction, \"[x|y]\"))\n\nfold_paper &lt;- function(df, instructions, step = 1) {\n  \n  dir &lt;- instructions %&gt;% \n    slice(step) %&gt;% \n    pull(fold_direction)\n  \n  loc &lt;- instructions %&gt;% \n    slice(step) %&gt;% \n    pull(fold_loc)\n  \n  folded_paper &lt;- df %&gt;% \n    mutate(x = if_else(x &lt;= loc | dir == \"y\", x, 2 * loc - x),\n           y = if_else(y &lt;= loc | dir == \"x\", y, 2 * loc - y)) %&gt;% \n    distinct(x, y)\n  \n  return(folded_paper)\n  \n}\n\nreduce(seq(nrow(input_folds)), ~ fold_paper(.x, input_folds, step = .y), \n       .init = input_paper) %&gt;% \n  mutate(dot = \"#\") %&gt;% \n  ggplot(aes(x = x, y = y)) +\n  geom_tile(fill = \"#f2f2f2\") +\n  geom_text(aes(label = dot), color = \"#b3b3b3\", size = 8) +\n  scale_y_reverse() +\n  coord_equal() + \n  theme_void() + \n  theme(plot.margin = margin(rep(10,4), unit = \"mm\"),\n        plot.background = element_rect(fill = \"#0f0f23\"))\n\nggsave(here::here(\"2021\", \"day_13\", \"plot_day13_pt2.png\"), last_plot(), \n       height = 3, width = 8, dpi = 300)\n\n\n\n0.322 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-11",
    "href": "2021.html#part-1-11",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\nWith some help once again from Ildikó Czeller 🙌!\n\nlibrary(tidyverse)\n\ninput_sequence &lt;- read_lines(here::here(\"2021\",\"day_14\",\"input_day14.txt\"), \n                             n_max = 1)\ninput_rules &lt;- read_delim(here::here(\"2021\",\"day_14\",\"input_day14.txt\"), \n                          delim = \"-&gt;\",  skip = 2, \n                          col_names = c(\"pair\",\"insert\")) %&gt;% \n  mutate(across(everything(), ~ str_trim(.x)))\n\nrules &lt;- input_rules %&gt;% \n  mutate(pair_chars = str_split(pair, \"\")) %&gt;% \n  unnest_wider(pair_chars, names_sep = \"\") %&gt;% \n  mutate(new_pair1 = str_glue(\"{pair_chars1}{insert}\"), \n         new_pair2 = str_glue(\"{insert}{pair_chars2}\")) %&gt;% \n  rowwise() %&gt;% \n  mutate(new_pair = list(c(new_pair1, new_pair2))) %&gt;% \n  select(pair, new_pair) %&gt;% \n  ungroup()\n\npairs_from_string &lt;- function(string) {\n  ind_chars &lt;- str_split(string, \"\") %&gt;% \n    unlist()\n  pairs &lt;- head(str_glue(\"{ind_chars}{lead(ind_chars)}\"), -1)\n  return(pairs)\n}\n\ninitial_pair_frequencies &lt;- input_sequence %&gt;% \n  pairs_from_string() %&gt;% \n  as_tibble() %&gt;% \n  rename(pair = value) %&gt;% \n  count(pair, name = \"freq\")\n\napply_rules &lt;- function(df) {\n  \n  out &lt;- df %&gt;% \n    inner_join(rules, by = \"pair\") %&gt;% \n    unnest_longer(new_pair) %&gt;% \n    group_by(new_pair) %&gt;% \n    summarize(freq = sum(freq)) %&gt;% \n    rename(pair = new_pair)\n  return(out)\n  \n}\n\nreduce(seq(10), ~ apply_rules(.x), .init = initial_pair_frequencies) %&gt;% \n  separate_rows(pair, sep = \"\") %&gt;% \n  filter(pair != \"\") %&gt;% \n  group_by(pair) %&gt;% \n  summarise(freq = ceiling(sum(freq) / 2)) %&gt;% \n  ungroup() %&gt;% \n  summarise(diff = max(freq) - min(freq)) %&gt;% \n  pull(diff) %&gt;% \n  print()\n\n\n\n[1] 2068\n\n\n0.259 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-11",
    "href": "2021.html#part-2-11",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput_sequence &lt;- read_lines(here::here(\"2021\",\"day_14\",\"input_day14.txt\"), \n                             n_max = 1)\ninput_rules &lt;- read_delim(here::here(\"2021\",\"day_14\",\"input_day14.txt\"), \n                          delim = \"-&gt;\",  skip = 2, \n                          col_names = c(\"pair\",\"insert\")) %&gt;% \n  mutate(across(everything(), ~ str_trim(.x)))\n\nrules &lt;- input_rules %&gt;% \n  mutate(pair_chars = str_split(pair, \"\")) %&gt;% \n  unnest_wider(pair_chars, names_sep = \"\") %&gt;% \n  mutate(new_pair1 = str_glue(\"{pair_chars1}{insert}\"), \n         new_pair2 = str_glue(\"{insert}{pair_chars2}\")) %&gt;% \n  rowwise() %&gt;% \n  mutate(new_pair = list(c(new_pair1, new_pair2))) %&gt;% \n  select(pair, new_pair) %&gt;% \n  ungroup()\n\npairs_from_string &lt;- function(string) {\n  ind_chars &lt;- str_split(string, \"\") %&gt;% \n    unlist()\n  pairs &lt;- head(str_glue(\"{ind_chars}{lead(ind_chars)}\"), -1)\n  return(pairs)\n}\n\ninitial_pair_frequencies &lt;- input_sequence %&gt;% \n  pairs_from_string() %&gt;% \n  as_tibble() %&gt;% \n  rename(pair = value) %&gt;% \n  count(pair, name = \"freq\")\n\napply_rules &lt;- function(df) {\n  \n  out &lt;- df %&gt;% \n    inner_join(rules, by = \"pair\") %&gt;% \n    unnest_longer(new_pair) %&gt;% \n    group_by(new_pair) %&gt;% \n    summarize(freq = sum(freq)) %&gt;% \n    rename(pair = new_pair)\n  return(out)\n  \n}\n\noptions(scipen = 999)\n\nreduce(seq(40), ~ apply_rules(.x), .init = initial_pair_frequencies) %&gt;% \n  separate_rows(pair, sep = \"\") %&gt;% \n  filter(pair != \"\") %&gt;% \n  group_by(pair) %&gt;% \n  summarise(freq = ceiling(sum(freq) / 2)) %&gt;% \n  ungroup() %&gt;% \n  summarise(diff = max(freq) - min(freq)) %&gt;% \n  pull(diff) %&gt;% \n  print()\n\n\n\n[1] 2158894777814\n\n\n0.873 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-12",
    "href": "2021.html#part-1-12",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_lines(here::here(\"2021\",\"day_17\",\"input_day17.txt\")) %&gt;% \n  str_extract_all(\"-?[0-9]+\", simplify = TRUE) %&gt;% \n  as.numeric() %&gt;% \n  tibble(value = .) %&gt;% \n  mutate(pos = c('xmin', 'xmax', 'ymin', 'ymax')) %&gt;% \n  pivot_wider(names_from = pos, values_from = value)\n\ninput %&gt;% \n  mutate(ylim = (abs(ymin) - 1) * abs(ymin) / 2) %&gt;% \n  pull(ylim) %&gt;% \n  print()\n\n\n\n[1] 5460\n\n\n0.025 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-12",
    "href": "2021.html#part-2-12",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\nI really admire Ildikó Czeller’s neat and tidy solution here, which (with some trial-and-error) worked beautifully!\n\nlibrary(tidyverse)\n\ninput &lt;- read_lines(here::here(\"2021\",\"day_17\",\"input_day17.txt\")) %&gt;% \n  str_extract_all(\"-?[0-9]+\", simplify = TRUE) %&gt;% \n  as.numeric() %&gt;% \n  tibble(value = .) %&gt;% \n  mutate(pos = c('xmin', 'xmax', 'ymin', 'ymax')) %&gt;% \n  pivot_wider(names_from = pos, values_from = value)\n\npositions &lt;- crossing(vx = seq(0, input[[\"xmax\"]]), \n                      vy = seq(input[[\"ymin\"]], 250), \n                      s = seq(0, 500)) %&gt;%\n  mutate(dx = pmax(vx - s, 0),\n         dy = vy - s) %&gt;% \n  group_by(vx, vy) %&gt;% \n  mutate(x = cumsum(dx),\n         y = cumsum(dy)) %&gt;% \n  ungroup()\n\npositions %&gt;%\n  filter(x &gt;= input[[\"xmin\"]] & x &lt;= input[[\"xmax\"]] & \n           y &gt;= input[[\"ymin\"]] & y &lt;= input[[\"ymax\"]]) %&gt;%\n  distinct(vx, vy) %&gt;% \n  count() %&gt;% \n  pull(n) %&gt;% \n  print()\n\n\n\n[1] 3618\n\n\n10.358 sec elapsed"
  },
  {
    "objectID": "2021.html#part-1-13",
    "href": "2021.html#part-1-13",
    "title": "My 2021 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_delim(here::here(\"2021\",\"day_21\",\"input_day21.txt\"), delim = \":\", \n                    col_names = c(\"player\",\"start_pos\")) %&gt;% \n  mutate(across(everything(), ~ parse_number(.x))) %&gt;% \n  pull(start_pos)\n\nscores &lt;- c(0, 0)\ndie_roll &lt;- 0\n\ndie_value &lt;- function(die_roll) {\n  value &lt;- if_else(die_roll %% 100 == 0, 100, die_roll %% 100)\n  return(value)\n}\n\nplace_value &lt;- function(place_idx) {\n  value &lt;- if_else(place_idx %% 10 == 0, 10, place_idx %% 10)\n  return(value)\n}\n\nroll_for_player &lt;- function(player) {\n  die_sum &lt;- sum(die_value(die_roll + seq(3)))\n  die_roll &lt;&lt;- die_roll + 3\n  scores[player] &lt;&lt;- scores[player] + place_value(input[player] + die_sum)\n  input[player] &lt;&lt;- place_value(input[player] + die_sum)\n}\n\nwhile (max(scores) &lt; 1000) {\n  roll_for_player(1)\n  if (max(scores) &lt; 1000) {\n    roll_for_player(2)\n  }\n}\n\nprint(min(scores) * die_roll)\n\n\n\n[1] 1002474\n\n\n0.625 sec elapsed"
  },
  {
    "objectID": "2021.html#part-2-13",
    "href": "2021.html#part-2-13",
    "title": "My 2021 Attempts",
    "section": "Part 2",
    "text": "Part 2\nSorry, part 1 was I could manage here."
  },
  {
    "objectID": "2022.html#part-1",
    "href": "2022.html#part-1",
    "title": "My 2022 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_csv(here::here(\"2022\", \"day_01\", \"input_day01.txt\"), \n                  col_names = \"calories\", skip_empty_rows = FALSE)\n\ninput |&gt; \n  mutate(empty = ifelse(is.na(calories), 1, 0),\n         elf = cumsum(empty)) |&gt; \n  drop_na() |&gt; \n  group_by(elf) |&gt; \n  summarise(total_calories = sum(calories)) |&gt;\n  slice_max(total_calories) |&gt; \n  pull(total_calories) |&gt; \n  print()\n\n\n\n[1] 72602\n\n\n0.261 sec elapsed"
  },
  {
    "objectID": "2022.html#part-2",
    "href": "2022.html#part-2",
    "title": "My 2022 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput &lt;- read_csv(here::here(\"2022\", \"day_01\", \"input_day01.txt\"), \n                  col_names = \"calories\", skip_empty_rows = FALSE)\n\ninput |&gt; \n  mutate(empty = ifelse(is.na(calories), 1, 0),\n         elf = cumsum(empty)) |&gt; \n  drop_na() |&gt; \n  group_by(elf) |&gt; \n  summarise(total_calories = sum(calories)) |&gt;\n  slice_max(total_calories, n = 3) |&gt; \n  summarise(total_calories = sum(total_calories)) |&gt; \n  pull(total_calories) |&gt; \n  print()\n\n\n\n[1] 207410\n\n\n0.084 sec elapsed"
  },
  {
    "objectID": "2022.html#part-1-1",
    "href": "2022.html#part-1-1",
    "title": "My 2022 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(here::here(\"2022\", \"day_02\", \"input_day02.txt\"), \n                    col_names = c(\"x\", \"y\"))\n\ninput |&gt; \n  rename(opp = x,\n         me = y) |&gt; \n  mutate(opp_base_score = case_when(opp == \"A\" ~ 1,\n                                    opp == \"B\" ~ 2,\n                                    opp == \"C\" ~ 3),\n         me_base_score = case_when(me == \"X\" ~ 1,\n                                   me == \"Y\" ~ 2,\n                                   me == \"Z\" ~ 3),\n         score_diff = me_base_score - opp_base_score,\n         me_turn_score = case_when(score_diff == -1 | score_diff == 2 ~ 0,\n                                   score_diff == 0 ~ 3,\n                                   score_diff == 1 | score_diff == -2 ~ 6),\n         me_game_score = me_base_score + me_turn_score) |&gt; \n  summarise(total_score = sum(me_game_score)) |&gt; \n  pull(total_score) |&gt; \n  print()\n\n\n\n[1] 14531\n\n\n0.038 sec elapsed"
  },
  {
    "objectID": "2022.html#part-2-1",
    "href": "2022.html#part-2-1",
    "title": "My 2022 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(here::here(\"2022\", \"day_02\", \"input_day02.txt\"), \n                    col_names = c(\"x\", \"y\"))\n\ninput |&gt; \n  rename(opp = x,\n         outcome = y) |&gt; \n  mutate(opp_base_score = case_when(opp == \"A\" ~ 1,\n                                    opp == \"B\" ~ 2,\n                                    opp == \"C\" ~ 3),\n         me_turn_score = case_when(outcome == \"X\" ~ 0,\n                                   outcome == \"Y\" ~ 3,\n                                   outcome == \"Z\" ~ 6),\n         me_base_score = case_when(me_turn_score == 3 ~ opp_base_score,\n                                   me_turn_score == 0 & \n                                     opp_base_score &gt; 1 ~ opp_base_score - 1,\n                                   me_turn_score == 0 & opp_base_score == 1 ~ 3,\n                                   me_turn_score == 6 & \n                                     opp_base_score &lt; 3 ~ opp_base_score + 1,\n                                   me_turn_score == 6 & opp_base_score == 3 ~ 1),\n         me_game_score = me_turn_score + me_base_score) |&gt; \n  summarise(total_score = sum(me_game_score)) |&gt; \n  pull(total_score) |&gt; \n  print()\n\n\n\n[1] 11258\n\n\n0.021 sec elapsed"
  },
  {
    "objectID": "2022.html#part-1-2",
    "href": "2022.html#part-1-2",
    "title": "My 2022 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(here::here(\"2022\", \"day_03\", \"input_day03.txt\"), \n                    col_names = \"rucksack\")\n\npriority_values &lt;- tibble(char = c(letters, LETTERS)) |&gt; \n  mutate(priority = seq(n()))\n\ninput |&gt; \n  mutate(nitems = nchar(rucksack),\n         comp1 = str_sub(rucksack, 1, nitems/2),\n         comp2 = str_sub(rucksack, nitems/2 + 1, nitems),\n         comp1_regex = map_chr(strsplit(comp1, \"\"), str_c, collapse = \"|\"),\n         common = str_extract(comp2, comp1_regex)) |&gt; \n  left_join(priority_values, by = c(\"common\" = \"char\")) |&gt; \n  summarise(sum = sum(priority)) |&gt; \n  pull(sum) |&gt; \n  print()\n\n\n\n[1] 7793\n\n\n0.046 sec elapsed"
  },
  {
    "objectID": "2022.html#part-2-2",
    "href": "2022.html#part-2-2",
    "title": "My 2022 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(here::here(\"2022\", \"day_03\", \"input_day03.txt\"), \n                    col_names = \"rucksack\")\n\npriority_values &lt;- tibble(char = c(letters, LETTERS)) |&gt; \n  mutate(priority = seq(n()))\n\ninput |&gt; \n  mutate(group = rep(seq(unique(n())/3), each = 3)) |&gt; \n  group_by(group) |&gt; \n  summarise(group_items = str_c(rucksack, collapse = \"-\")) |&gt; \n  separate(group_items, into = c(\"comp1\", \"comp2\", \"comp3\")) |&gt; \n  mutate(comp1_regex = map_chr(strsplit(comp1, \"\"), str_c, collapse = \"|\"),\n         common_12 = str_extract_all(comp2, comp1_regex),\n         comp12_regex = map_chr(common_12, str_c, collapse = \"|\"),\n         common_all = str_extract(comp3, comp12_regex)) |&gt; \n  left_join(priority_values, by = c(\"common_all\" = \"char\")) |&gt; \n  summarise(sum = sum(priority)) |&gt; \n  pull(sum) |&gt; \n  print()\n\n\n\n[1] 2499\n\n\n0.043 sec elapsed"
  },
  {
    "objectID": "2022.html#part-1-3",
    "href": "2022.html#part-1-3",
    "title": "My 2022 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(here::here(\"2022\", \"day_04\", \"input_day04.txt\"), \n                    col_names = \"pairs\")\n\ninput |&gt; \n  separate(pairs, sep = \",|\\\\-\", into = c(\"section1_start\",\"section1_end\", \n                                      \"section2_start\", \"section2_end\")) |&gt; \n  mutate(across(everything(), ~ as.numeric(.x)),\n         overlap_1_2 = section1_start &gt;= section2_start & \n           section1_end &lt;= section2_end,\n         overlap_2_1 = section2_start &gt;= section1_start & \n           section2_end &lt;= section1_end) |&gt; \n  filter(overlap_1_2 | overlap_2_1) |&gt;\n  nrow() |&gt; \n  print()\n\n\n\n[1] 453\n\n\n0.043 sec elapsed"
  },
  {
    "objectID": "2022.html#part-2-3",
    "href": "2022.html#part-2-3",
    "title": "My 2022 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(here::here(\"2022\", \"day_04\", \"input_day04.txt\"), \n                    col_names = \"pairs\")\n\ninput |&gt; \n  separate(pairs, sep = \",|\\\\-\", into = c(\"section1_start\",\"section1_end\", \n                                      \"section2_start\", \"section2_end\")) |&gt; \n  mutate(across(everything(), ~ as.numeric(.x)),\n         section1 = map2(section1_start, section1_end, ~seq(.x,.y)),\n         section2 = map2(section2_start, section2_end, ~seq(.x,.y)),\n         intersect = map2(section1, section2, ~ intersect(.x, .y)),\n         n_overlapping = lengths(intersect)) |&gt;\n  filter(n_overlapping &gt; 0) |&gt; \n  nrow() |&gt; \n  print()\n\n\n\n[1] 919\n\n\n0.071 sec elapsed"
  },
  {
    "objectID": "2022.html#part-1-4",
    "href": "2022.html#part-1-4",
    "title": "My 2022 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ncrates &lt;- read_fwf(here::here(\"2022\", \"day_05\", \"input_day05.txt\"), \n                   col_positions = fwf_widths(widths = NA)) |&gt; \n  janitor::clean_names() |&gt; \n  filter(str_detect(x1, \"\\\\[\")) |&gt; \n  separate(x1,\n           into = str_glue(\"stack_{seq(9)}\"), \n           sep = c(seq(from = 4, to = 37, by = 4))) |&gt; \n  mutate(across(everything(), ~ str_extract(.x, \"[A-Z]\"))) |&gt; \n  as.list() |&gt; \n  map(~ .x[grepl(\"[A-Z]\", .x)])\n\nsteps &lt;- read_delim(here::here(\"2022\", \"day_05\", \"input_day05.txt\"), skip = 10,\n                    col_names = c(\"action\", \"index\", \"f\", \"from\", \"t\", \"to\")) |&gt; \n  select(index, from, to) |&gt; \n  mutate(across(c(from, to), ~ str_c(\"stack_\", .x)))\n\nrearrange_crates &lt;- function(x, steps){\n  from &lt;- steps$from\n  to &lt;- steps$to\n  n &lt;- steps$index\n  \n  for(i in seq(n)) {  \n    x[[to]] &lt;- c(x[[from]][1], x[[to]])\n    x[[from]]&lt;- tail(x[[from]], length(x[[from]])-1)\n  }\n  return(x)\n}\n\nreduce(rlist::list.parse(steps), rearrange_crates, .init = crates) |&gt; \n  map_chr(~ .x[1]) |&gt; \n  paste(collapse = \"\") |&gt; \n  print()\n\n\n\n[1] \"WHTLRMZRC\"\n\n\n0.371 sec elapsed"
  },
  {
    "objectID": "2022.html#part-2-4",
    "href": "2022.html#part-2-4",
    "title": "My 2022 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ncrates &lt;- read_fwf(here::here(\"2022\", \"day_05\", \"input_day05.txt\"), \n                   col_positions = fwf_widths(widths = NA)) |&gt; \n  janitor::clean_names() |&gt; \n  filter(str_detect(x1, \"\\\\[\")) |&gt; \n  separate(x1,\n           into = str_glue(\"stack_{seq(9)}\"), \n           sep = c(seq(from = 4, to = 37, by = 4))) |&gt; \n  mutate(across(everything(), ~ str_extract(.x, \"[A-Z]\"))) |&gt; \n  as.list() |&gt; \n  map(~ .x[grepl(\"[A-Z]\", .x)])\n\nsteps &lt;- read_delim(here::here(\"2022\", \"day_05\", \"input_day05.txt\"), skip = 10,\n                    col_names = c(\"action\", \"index\", \"f\", \"from\", \"t\", \"to\")) |&gt; \n  select(index, from, to) |&gt; \n  mutate(across(c(from, to), ~ str_c(\"stack_\", .x)))\n\nrearrange_crates_pt2 &lt;- function(x, steps){\n  from &lt;- steps$from\n  to &lt;- steps$to\n  n &lt;- steps$index\n  \n  x[[to]] &lt;- c(x[[from]][seq(n)], x[[to]])\n  x[[from]]&lt;- tail(x[[from]], length(x[[from]])-n)\n  return(x)\n}\n\nreduce(rlist::list.parse(steps), rearrange_crates_pt2, .init = crates) |&gt; \n  map_chr(~ .x[1]) |&gt; \n  paste(collapse = \"\") |&gt; \n  print()\n\n\n\n[1] \"GMPMLWNMG\"\n\n\n0.143 sec elapsed"
  },
  {
    "objectID": "2022.html#part-1-5",
    "href": "2022.html#part-1-5",
    "title": "My 2022 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\ninput &lt;- readLines(here::here(\"2022\", \"day_06\", \"input_day06.txt\"))\n\nstrsplit(input, split = \"\")[[1]] |&gt; \n  slider::slide_lgl(~ length(.x) == 4 & length(.x) == length(unique(.x)), \n                    .before = 3) |&gt; \n  (\\(x) {which(x == TRUE)[1]})() |&gt; \n  print()\n\n\n\n[1] 1300\n\n\n0.046 sec elapsed"
  },
  {
    "objectID": "2022.html#part-2-5",
    "href": "2022.html#part-2-5",
    "title": "My 2022 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\ninput &lt;- readLines(here::here(\"2022\", \"day_06\", \"input_day06.txt\"))\n\nstrsplit(input, split = \"\")[[1]] |&gt; \n  slider::slide_lgl(~ length(.x) == 14 & length(.x) == length(unique(.x)), \n                    .before = 13) |&gt; \n  (\\(x) {which(x == TRUE)[1]})() |&gt; \n  print()\n\n\n\n[1] 3986\n\n\n0.027 sec elapsed"
  },
  {
    "objectID": "2022.html#part-1-6",
    "href": "2022.html#part-1-6",
    "title": "My 2022 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nfrom collections import defaultdict\nfrom itertools import accumulate\n\nlines = open('./2022/day_07/input_day07.txt').read().splitlines()\n\ndirs = defaultdict(int)\n\nfor line in lines:\n  match line.split():\n    case \"$\", \"cd\", \"/\":\n      path = [\"/\"]\n    case \"$\", \"cd\", \"..\":\n      path.pop()\n    case \"$\", \"cd\", dir:\n      path.append(dir + \"/\")\n    case \"$\" | \"dir\", *_:\n      continue\n    case size, _:\n      for p in accumulate(path):\n        dirs[p] += int(size)\n\ntotal_sizes = sum(size for size in dirs.values() if size &lt;= 1e5)\nprint(total_sizes)\n\n\n\n1783610\n\n\n0.013 seconds elapsed"
  },
  {
    "objectID": "2022.html#part-2-6",
    "href": "2022.html#part-2-6",
    "title": "My 2022 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nfrom collections import defaultdict\nfrom itertools import accumulate\n\nlines = open('./2022/day_07/input_day07.txt').read().splitlines()\n\ndirs = defaultdict(int)\n\nfor line in lines:\n  match line.split():\n    case \"$\", \"cd\", \"/\":\n      path = [\"/\"]\n    case \"$\", \"cd\", \"..\":\n      path.pop()\n    case \"$\", \"cd\", dir:\n      path.append(dir + \"/\")\n    case \"$\" | \"dir\", *_:\n      continue\n    case size, _:\n      for p in accumulate(path):\n        dirs[p] += int(size)\n\ndir_to_remove = min(size for size in dirs.values() if size &gt;= dirs[\"/\"] - 40e6)\nprint(dir_to_remove)\n\n\n\n4370655\n\n\n0.010 seconds elapsed"
  },
  {
    "objectID": "2022.html#part-1-7",
    "href": "2022.html#part-1-7",
    "title": "My 2022 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlines = open('./2022/day_08/input_day08.txt').read().splitlines()\n\ntrees = [[*map(int, line)] for line in lines]\n\nn = 2 * (len(trees[0]) + len(trees) - 2)\n\nfor y in range(1, len(trees) - 1):\n  for x in range(1, len(trees[0]) - 1):\n    tree = trees[y][x]\n    \n    row = trees[y]\n    col = [i[x] for i in trees]\n    \n    left = row[:x]\n    right = row[x + 1 :]\n    top = col[:y]\n    bottom = col[y + 1 :]\n    \n    if tree &gt; min(max(left), max(right), max(top), max(bottom)):\n      n += 1\n\nprint(n)\n\n\n\n1700\n\n\n0.092 seconds elapsed"
  },
  {
    "objectID": "2022.html#part-2-7",
    "href": "2022.html#part-2-7",
    "title": "My 2022 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlines = open('./2022/day_08/input_day08.txt').read().splitlines()\n\ntrees = [[*map(int, line)] for line in lines]\n\ns = 0\nw = len(trees[0])\nh = len(trees)\n\nfor y in range(1, len(trees) - 1):\n  for x in range(1, len(trees[0]) - 1):\n    t = trees[y][x]\n    \n    row = trees[y]\n    col = [i[x] for i in trees]\n    \n    left = row[:x][::-1]\n    right = row[x + 1 :]\n    top = col[:y][::-1]\n    bottom = col[y + 1 :]\n    \n    left_blocked = [i for i, v in enumerate(left) if v - t &gt;= 0]\n    left_score = x if len(left_blocked) == 0 else left_blocked[0] + 1\n    \n    right_blocked = [i for i, v in enumerate(right) if v - t &gt;= 0]\n    right_score = w - x - 1 if len(right_blocked) == 0 else right_blocked[0] + 1\n    \n    top_blocked = [i for i, v in enumerate(top) if v - t &gt;= 0]\n    top_score = y if len(top_blocked) == 0 else top_blocked[0] + 1\n    \n    bottom_blocked = [i for i, v in enumerate(bottom) if v - t &gt;= 0]\n    bottom_score = h - y - 1 if len(bottom_blocked) == 0 else bottom_blocked[0] + 1\n    \n    ss = left_score * right_score * top_score * bottom_score\n    if ss &gt; s:\n        s = ss\n\nprint(s)\n\n\n\n470596\n\n\n0.203 seconds elapsed"
  },
  {
    "objectID": "2022.html#part-1-8",
    "href": "2022.html#part-1-8",
    "title": "My 2022 Attempts",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(here::here(\"2022\", \"day_10\", \"input_day10.txt\"), \n                    col_names = c(\"operation\", \"argument\"))\n\ninput |&gt; \n  replace_na(list(argument = 0)) |&gt; \n  mutate(steps = case_when(str_detect(operation, \"add\") ~ 2, \n                           str_detect(operation, \"noop\") ~ 1),\n         step_num_start = tail(accumulate(steps, `+`, .init = 1), -1) - steps,\n         x_reg = 1 + cumsum(argument),\n         x_reg_prev = c(1, head(x_reg, -1))) |&gt; \n  uncount(steps) |&gt; \n  rowid_to_column(var = \"step_num\") |&gt; \n  select(step_num, x_reg_prev) |&gt;\n  rename(x_reg = x_reg_prev) |&gt; \n  filter(step_num %in% seq(20, n(), 40)) |&gt; \n  summarise(total = sum(step_num * x_reg)) |&gt; \n  pull(total) |&gt; \n  print()\n\n\n\n[1] 14060\n\n\n0.039 sec elapsed"
  },
  {
    "objectID": "2022.html#part-2-8",
    "href": "2022.html#part-2-8",
    "title": "My 2022 Attempts",
    "section": "Part 2",
    "text": "Part 2\n\nlibrary(tidyverse)\n\ninput &lt;- read_table(here::here(\"2022\", \"day_10\", \"input_day10.txt\"), \n                    col_names = c(\"operation\", \"argument\"))\n\ninput |&gt; \n  replace_na(list(argument = 0)) |&gt; \n  mutate(steps = case_when(str_detect(operation, \"add\") ~ 2, \n                           str_detect(operation, \"noop\") ~ 1),\n         step_num_start = tail(accumulate(steps, `+`, .init = 1), -1) - steps,\n         x_reg = 1 + cumsum(argument),\n         x_reg_prev = c(1, head(x_reg, -1))) |&gt; \n  uncount(steps) |&gt; \n  mutate(step_num = seq(1, n())) |&gt;\n  select(step_num, x_reg_prev) |&gt;\n  rename(x_reg = x_reg_prev) |&gt; \n  mutate(x_pos = (step_num - 1) %% 40,\n         pixel_on = abs(x_pos - x_reg) &lt; 2,\n         pixel = ifelse(pixel_on, \"#\", NA),\n         row_num = cumsum(x_pos == 0)) |&gt; \n  group_by(row_num) |&gt; \n  mutate(x = row_number()) |&gt; \n  filter(pixel_on) |&gt; \n  ggplot(aes(x = x, y = row_num)) +\n  geom_tile(fill = \"#f2f2f2\") +\n  geom_text(label = \"#\", color = \"#b3b3b3\", size = 4) +\n  scale_y_reverse() +\n  coord_equal() + \n  theme_void() + \n  theme(plot.margin = margin(rep(10,4), unit = \"mm\"),\n        plot.background = element_rect(fill = \"#0f0f23\"))\n\nggsave(here::here(\"2022\", \"day_10\", \"plot_day10_pt2.png\"), last_plot(), \n       height = 3, width = 8, dpi = 300)\n\n\n\n0.342 sec elapsed"
  }
]