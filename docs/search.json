{
  "articles": [
    {
      "path": "2021.html",
      "title": "My 2021 Attempts",
      "author": [],
      "contents": "\n\n\n\n\n\nDay 1\nPart 1\n\n\nlibrary(tidyverse)\n\ndata <- read_table(\"./2021/day_01/input_day01.txt\", col_names = \"depth\")\n\ndata %>% \n  mutate(depth_lag = lag(depth),\n         diff = depth - depth_lag,\n         diff_bin = diff / abs(diff)) %>% \n  count(diff_bin)\n\ndata %>% \n  mutate(depth_lag = lag(depth),\n         diff = depth - depth_lag,\n         diff_bin = diff / abs(diff),\n         diff_bin_label = case_when(diff_bin == -1 ~ \"Smaller than last\",\n                                    diff_bin == 1 ~ \"Larger than last\",\n                                    TRUE ~ \"No measurement/no difference\")) %>% \n  count(diff_bin_label) %>% \n  filter(str_detect(diff_bin_label, \"Larger\")) %>% \n  pull(n) %>% \n  print()\n\n\n\n[1] 1390\n0.233 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ndata <- read_table(\"./2021/day_01/input_day01.txt\", col_names = \"depth\")\n\ndata %>% \n  slider::slide(., ~.x, .after = 2, .f = ~sum(.x)) %>% \n  enframe(name = \"window_no\", value = \"depth\") %>% \n  unnest(depth) %>% \n  mutate(depth_lag = lag(depth),\n         diff = depth - depth_lag,\n         diff_bin = diff / abs(diff),\n         diff_bin_label = case_when(diff_bin == -1 ~ \"Smaller than last\",\n                                    diff_bin == 1 ~ \"Larger than last\",\n                                    TRUE ~ \"No measurement/no difference\")) %>% \n  count(diff_bin_label) %>% \n  filter(str_detect(diff_bin_label, \"Larger\")) %>% \n  pull(n) %>% \n  print()\n\n\n\n[1] 1457\n0.228 sec elapsed\n\nDay 2\nPart 1\n\n\nlibrary(tidyverse)\n\ncommands <- read_table(\"./2021/day_02/input_day02.txt\", \n                       col_names = c(\"direction\",\"value\"))\n\nfinal_position <- commands %>% \n  mutate(value_bin = case_when(direction == \"up\" ~ value * -1,\n                               TRUE ~ value),\n         direction_bin = case_when(direction == \"forward\" ~ \"x\",\n                                   TRUE ~ \"y\")) %>% \n  group_by(direction_bin) %>% \n  summarise(pos = sum(value_bin)) %>% \n  ungroup()\n\nfinal_position %>% \n  summarise(mult = prod(pos)) %>% \n  pull(mult) %>% \n  print()\n\n\n\n[1] 1654760\n0.055 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ncommands <- read_table(\"./2021/day_02/input_day02.txt\", \n                       col_names = c(\"direction\",\"value\"))\n\naim <- depth <- 0\nfor (i in seq(nrow(commands))) {\n  \n  t_direction <- commands %>% \n    slice(i) %>% \n    pull(direction)\n  t_value <- commands %>% \n    slice(i) %>% \n    pull(value)\n  \n  if (t_direction == \"forward\") {\n    depth <- depth + (aim * t_value)\n  } else if (t_direction == \"down\") {\n    aim <- aim + t_value\n  } else if (t_direction == \"up\") {\n    aim <- aim - t_value\n  }\n  \n}\n\nfinal_position %>% \n  filter(direction_bin == \"x\") %>% \n  pull(pos) %>% \n  prod(., depth) %>% \n  print()\n\n\n\n[1] 1956047400\n5.08 sec elapsed\n\nDay 3\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_table(\"./2021/day_03/input_day03.txt\", col_names = \"full_binary\")\n\nn_bits <- input %>% \n  pull(full_binary) %>% \n  nchar() %>% \n  unique()\n\ninput_conv <- input %>% \n  separate(full_binary, into = str_glue(\"bit{seq(0,n_bits)}\"), sep = \"\") %>% \n  select(-bit0) %>% \n  pivot_longer(starts_with(\"bit\"), names_to = \"bit_no\") %>%\n  mutate(value = as.numeric(value),\n         bit_no = parse_number(bit_no)) %>% \n  group_by(bit_no) %>% \n  count(value)\n\ngamma_rate <- input_conv %>% \n  slice_max(n) %>% \n  pull(value) %>% \n  str_c(collapse = \"\")\n\ngamma_rate_dec <- strtoi(gamma_rate, base = 2)\n\nepsilon_rate <- input_conv %>% \n  slice_min(n) %>% \n  pull(value) %>% \n  str_c(collapse = \"\")\n\nepsilon_rate_dec <- strtoi(epsilon_rate, base = 2)\n\nprint(gamma_rate_dec * epsilon_rate_dec)\n\n\n\n[1] 3148794\n0.119 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- read_table(\"./2021/day_03/input_day03.txt\", col_names = \"full_binary\")\n\ninput_conv_wide <- input %>% \n  separate(full_binary, into = str_glue(\"bit{seq(0,n_bits)}\"), sep = \"\") %>% \n  select(-bit0) %>% \n  mutate(across(everything(), ~ as.numeric(.x)))\n\napply_rule <- function(df, iteration, minmax = \"max\") {\n  \n  most_common <- df %>% \n    select(all_of(iteration)) %>% \n    group_by(across(everything())) %>% \n    count() %>% \n    ungroup()\n  \n  if (minmax == \"max\") {\n    most_common <- most_common %>% \n      slice_max(n) %>% \n      pull(1)\n  } else {\n    most_common <- most_common %>% \n      slice_min(n) %>% \n      pull(1)\n  }\n  \n  if (length(most_common) > 1) {\n    most_common <- ifelse(minmax == \"max\", 1, 0)\n  }\n  \n  df <- df %>% \n    filter(across(iteration, ~ .x == most_common))\n  \n  return(df)\n  \n}\n\noxygen_rating <- reduce(seq(n_bits), ~ apply_rule(.x, .y, minmax = \"max\"), \n                        .init = input_conv_wide) %>% \n  as.numeric() %>% \n  str_c(collapse = \"\") %>% \n  strtoi(base = 2)\n\nco2_rating <- reduce(seq(n_bits), ~ apply_rule(.x, .y, minmax = \"min\"), \n                     .init = input_conv_wide) %>% \n  as.numeric() %>% \n  str_c(collapse = \"\") %>% \n  strtoi(base = 2)\n\nprint(oxygen_rating * co2_rating)\n\n\n\n[1] 2795310\n1.057 sec elapsed\n\nDay 4\nPart 1\n\n\nlibrary(tidyverse)\n\ninput_numbers <- read_csv(\"./2021/day_04/input_day04.txt\", col_names = FALSE) %>% \n  slice(1) %>% \n  mutate(across(everything(), ~ as.numeric(.x))) %>% \n  as_vector()\n\nboards <- read_table(\"./2021/day_04/input_day04.txt\", skip = 2, \n                     col_names = FALSE, skip_empty_rows = TRUE) %>% \n  rename_with(~ str_glue(\"col{parse_number(.x)}\")) %>% \n  group_by(board_no = ceiling(row_number()/5)) %>% \n  rownames_to_column(\"row_no\")\n\nn_boards <- boards %>%\n  ungroup() %>% \n  slice_max(board_no) %>% \n  pull(board_no) %>% \n  unique()\n\nboards_long <- boards %>% \n  pivot_longer(starts_with(\"col\"), names_to = \"col_no\", values_to = \"number\") %>% \n  mutate(col_no = parse_number(col_no)) %>% \n  relocate(board_no, .after = last_col())\n\nrun_numbers <- function(df, in_number, n_boards = NULL) {\n  \n  if (any(str_detect(names(df),\"final_number\"))) {\n    return(df)\n    stop()\n  }\n  \n  board_filt <- df %>% \n    filter(number != in_number)\n  \n  n_unique_rows <- board_filt %>% \n    count(row_no) %>% \n    count(board_no) %>% \n    pull(n)\n  \n  n_unique_cols <- board_filt %>% \n    count(col_no) %>% \n    count(board_no) %>% \n    pull(n)\n  \n  #print(in_number)\n  \n  if (sum(n_unique_rows * n_unique_cols) < n_boards * 5 * 5) {\n    board_filt <- df %>% \n      mutate(final_number = in_number)\n    return(board_filt)\n  } else {\n    return(board_filt)\n  }\n  \n}\n\nbingo_game <- reduce(input_numbers, ~ run_numbers(.x, .y, n_boards = n_boards), \n                     .init = boards_long)\n\nwinning_board <- bingo_game %>% \n  filter(number != final_number) %>% \n  summarise(nrow = length(unique(row_no)),\n            ncol = length(unique(col_no))) %>% \n  filter(nrow * ncol < 25) %>% \n  pull(board_no)\n\nbingo_game %>% \n  ungroup() %>% \n  filter(number != final_number,\n         board_no == winning_board) %>% \n  summarise(sum_unmarked = sum(number),\n            final_number = unique(final_number)) %>% \n  as_vector() %>% \n  prod() %>% \n  print()\n\n\n\n[1] 63424\n2.357 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput_numbers <- read_csv(\"./2021/day_04/input_day04.txt\", col_names = FALSE) %>% \n  slice(1) %>% \n  mutate(across(everything(), ~ as.numeric(.x))) %>% \n  as_vector()\n\nboards <- read_table(\"./2021/day_04/input_day04.txt\", skip = 2, \n                     col_names = FALSE, skip_empty_rows = TRUE) %>% \n  rename_with(~ str_glue(\"col{parse_number(.x)}\")) %>% \n  group_by(board_no = ceiling(row_number()/5)) %>% \n  rownames_to_column(\"row_no\")\n\nn_boards <- boards %>%\n  ungroup() %>% \n  slice_max(board_no) %>% \n  pull(board_no) %>% \n  unique()\n\nboards_long <- boards %>% \n  pivot_longer(starts_with(\"col\"), names_to = \"col_no\", values_to = \"number\") %>% \n  mutate(col_no = parse_number(col_no)) %>% \n  relocate(board_no, .after = last_col())\n\nrun_numbers <- function(df, in_number, n_boards = NULL) {\n  \n  if (any(str_detect(names(df),\"final_number\"))) {\n    return(df)\n    stop()\n  }\n  \n  board_filt <- df %>% \n    filter(number != in_number)\n  \n  n_unique_rows <- board_filt %>% \n    count(row_no) %>% \n    count(board_no) %>% \n    pull(n)\n  \n  n_unique_cols <- board_filt %>% \n    count(col_no) %>% \n    count(board_no) %>% \n    pull(n)\n  \n  if (all(n_unique_rows * n_unique_cols < 5 * 4 + 1)) {\n    board_filt <- df %>% \n      mutate(final_number = in_number)\n    return(board_filt)\n  } else {\n    return(board_filt)\n  }\n  \n}\n\nbingo_game <- reduce(input_numbers, ~ run_numbers(.x, .y, n_boards = n_boards), \n                     .init = boards_long)\n\nlosing_board <- bingo_game %>% \n  summarise(nrow = length(unique(row_no)),\n            ncol = length(unique(col_no))) %>% \n  filter(nrow * ncol == 5 * 5) %>% \n  pull(board_no)\n\nbingo_game %>% \n  ungroup() %>% \n  filter(number != final_number,\n         board_no == losing_board) %>% \n  summarise(sum_unmarked = sum(number),\n            final_number = unique(final_number)) %>% \n  as_vector() %>% \n  prod() %>% \n  print()\n\n\n\n[1] 23541\n4.64 sec elapsed\n\nDay 5\nPart 1\n\n\nlibrary(tidyverse)\nlibrary(showtext)\n\ninput <- read_csv(here::here(\"2021\", \"day_05\",\"input_day05.txt\"), \n                  col_names = FALSE) %>% \n  rename(x1 = X1,\n         y2 = X3) %>% \n  separate(X2, into = c(\"y1\",\"x2\")) %>% \n  mutate(across(everything(), ~ as.numeric(.x)))\n\nfont_add_google(\"Josefin Sans\", family = \"google\")\nshowtext_auto()\n\ninput %>% \n  filter(x1 == x2 | y1 == y2) %>% \n  rowid_to_column(\"segment_no\") %>% \n  mutate(x_steps = map2(x1, x2, .f = seq),\n         y_steps = map2(y1, y2, .f = seq)) %>% \n  select(segment_no, x_steps, y_steps) %>% \n  unnest(c(x_steps, y_steps)) %>% \n  count(x_steps, y_steps) %>% \n  count(overlapping_segments = n > 1) %>% \n  filter(overlapping_segments) %>% \n  pull(n) %>% \n  print()\n\ninput %>% \n  filter(x1 == x2 | y1 == y2) %>% \n  rowid_to_column(\"segment_no\") %>% \n  ggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, color = segment_no),\n               size = 1.5, alpha = 0.6, lineend = \"round\") + \n  labs(title = \"**Advent of Code - Day 5**\",\n       color = \"**Hydrothermal vent n<sup>o<\/sup>**\") +\n  scico::scale_color_scico(palette = \"batlow\", breaks = c(1,seq(100,nrow(input), 100)), \n                           guide = guide_colorbar(title.position = \"top\", title.hjust = 0.5, \n                                                  barwidth = 10, barheight = 0.75, ticks = FALSE)) +\n  scale_y_reverse() +\n  theme_void(base_size = 24) + \n  theme(text = element_text(family = \"google\", color = \"grey90\"),\n        plot.title = ggtext::element_markdown(hjust = 0.5, size = 80,\n                                              margin = margin(rep(5,4), unit = \"pt\")),\n        legend.title = ggtext::element_markdown(margin = margin(b = -10, unit = \"pt\")),\n        legend.text = element_text(margin = margin(t = -10, \"pt\")),\n        legend.position = \"bottom\",\n        plot.margin = margin(rep(10,4), unit = \"mm\"),\n        plot.background = element_rect(fill = \"#0f0f23\"))\n\nggsave(here::here(\"2021\", \"day_05\", \"plot_day05.png\"), last_plot(), \n       height = 6, width = 8, dpi = 300)\n\n\n\n[1] 6572\n4.622 sec elapsed\n\n\nPart 2\n\n\nlibrary(tidyverse)\nlibrary(showtext)\n\ninput <- read_csv(here::here(\"2021\", \"day_05\",\"input_day05.txt\"), \n                  col_names = FALSE) %>% \n  rename(x1 = X1,\n         y2 = X3) %>% \n  separate(X2, into = c(\"y1\",\"x2\")) %>% \n  mutate(across(everything(), ~ as.numeric(.x)))\n\nfont_add_google(\"Josefin Sans\", family = \"google\")\nshowtext_auto()\n\ninput %>% \n  rowid_to_column(\"segment_no\") %>% \n  mutate(x_steps = map2(x1, x2, .f = seq),\n         y_steps = map2(y1, y2, .f = seq)) %>% \n  select(segment_no, x_steps, y_steps) %>% \n  unnest(c(x_steps, y_steps)) %>% \n  count(x_steps, y_steps) %>% \n  count(overlapping_segments = n > 1) %>% \n  filter(overlapping_segments) %>% \n  pull(n) %>% \n  print()\n\n\n\n[1] 21466\n3.024 sec elapsed\n\nDay 6\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_csv(here::here(\"2021\", \"day_06\",\"input_day06.txt\"), \n                  col_names = FALSE) %>% \n  unname() %>% \n  as_vector()\n\nn_days <- 80\n\ngen_fish <- function(x, day) {\n  \n  n_new <- sum(x == 0)\n  new_fish <- rep(8,n_new)\n  \n  old_fish_repl <- replace(x - 1, x - 1 < 0, 6)\n  \n  new_fish_vector = c(old_fish_repl, new_fish)\n  \n  n_fish <- length(new_fish_vector)\n  \n  #print(str_glue(\"Day {day}: {n_fish} fish\"))\n  \n  return(new_fish_vector)\n  \n}\n\nfinal_fish_vector <- reduce(seq(n_days), ~ gen_fish(.x, .y), .init = input)\n\nprint(length(final_fish_vector))\n\n\n\n[1] 386640\n0.512 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- read_csv(here::here(\"2021\", \"day_06\",\"input_day06.txt\"), \n                  col_names = FALSE) %>% \n  unname() %>% \n  as_vector()\n\ndata <- tabulate(input, nbins = 8) %>% \n  c(0, .) %>% \n  as_tibble() %>% \n  rename(n = value) %>% \n  mutate(value = row_number() - 1) %>% \n  relocate(value, .before = 1)\n\nget_fish_count <- function(x) {\n  \n  data_out <- x %>% \n    select(-n) %>% \n    full_join(x %>% mutate(value = value - 1), by = \"value\") %>% \n    mutate(n = replace_na(n, 0))\n  \n  data_out$n[data_out$value == 6] <- data_out %>% \n    filter(value %in% c(-1,6)) %>% \n    pull(n) %>% \n    sum()\n  \n  data_out$n[data_out$value == 8] <- data_out %>%\n    filter(value == -1) %>% \n    pull(n)\n  \n  data_out <- data_out %>% filter(value >= 0)\n  \n  return(data_out)\n}\n\nfinal_fish_count <- reduce(seq(256), ~ get_fish_count(.x), .init = data)\n\noptions(scipen = 999)\nfinal_fish_count %>% \n  summarise(total_fish = sum(n)) %>% \n  pull(total_fish) %>% \n  print()\n\n\n\n[1] 1733403626279\n7.552 sec elapsed\n\nDay 7\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_csv(here::here(\"2021\",\"day_07\",\"input_day07.txt\"), \n                  col_names = FALSE) %>% \n  unname() %>% \n  as_vector()\n\ncalc_fuel <- function(x, pos) {\n  fuel <- tibble(\n    position = pos,\n    consumption = sum(abs(input - pos))\n  ) \n  return(fuel)\n}\n\nfuel <- map_dfr(seq(0, max(input)), ~ calc_fuel(input, .x))\n\nfuel %>% \n  slice_min(consumption) %>% \n  pull(consumption) %>% \n  print()\n\n\n\n[1] 328187\n1.534 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- read_csv(here::here(\"2021\",\"day_07\",\"input_day07.txt\"), \n                  col_names = FALSE) %>% \n  unname() %>% \n  as_vector()\n\ncalc_fuel <- function(x, pos) {\n  \n  consumption <-  abs(input - pos) %>% \n    map_dbl(., ~ sum(seq(.x)))\n  \n  fuel <- tibble(\n    position = pos,\n    consumption = sum(consumption)\n  ) \n  return(fuel)\n}\n\nfuel <- map_dfr(seq(0, max(input)), ~ calc_fuel(input, .x))\n\nfuel %>% \n  slice_min(consumption) %>% \n  pull(consumption) %>% \n  print()\n\n\n\n[1] 91257582\n12.746 sec elapsed\n\nDay 8\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_delim(here::here(\"2021\",\"day_08\",\"input_day08.txt\"), delim = \"|\", \n                    col_names = FALSE)\n\nnumbers <- c(\"1\" = 2, \"4\" = 4, \"7\" = 3, \"8\" = 7)\n\ninput %>% \n  select(output = X2) %>% \n  mutate(output = str_trim(output)) %>% \n  separate(output, into = str_glue(\"digit{seq(4)}\")) %>% \n  mutate(across(everything(), ~ nchar(.x))) %>% \n  pivot_longer(cols = everything(), names_to = \"digit\", \n               values_to = \"n_segments\") %>% \n  filter(n_segments %in% numbers) %>% \n  nrow() %>% \n  print()\n\n\n\n[1] 294\n0.113 sec elapsed\n\nPart 2\nGot a lot of help from Emil Hvitveldt on this one. Reorganized his solution so I could make sense of it. This one hurt me 🤕\n\n\nlibrary(tidyverse)\n\ninput <- read_delim(here::here(\"2021\",\"day_08\",\"input_day08.txt\"), delim = \"|\", \n                    col_names = FALSE)\n\nsplit_segments <- function(x) {\n  x %>% \n    str_split(., \" \") %>%\n    map(., ~ str_split(.x, pattern = \"\")) %>%\n    map(., ~ map(.x, ~ sort(.x)))\n}\n\ndata <- input %>%\n  rename(input = X1,\n         output = X2) %>% \n  mutate(across(everything(), ~ str_trim(.x))) %>% \n  mutate(across(c(\"input\", \"output\"), split_segments))\n\nsolver <- function(input, output) {\n  \n  setdiff_length <- function(x, y) {\n    lengths(map(x, ~setdiff(x[[which(y)]], .x)))\n  }\n  \n  x1 <- lengths(input) == 2\n  x4 <- lengths(input) == 4\n  x7 <- lengths(input) == 3\n  x8 <- lengths(input) == 7\n  x6 <- lengths(input) == 6 & setdiff_length(input, x1) == 1\n  x0 <- lengths(input) == 6 & setdiff_length(input, x4) == 1 & !x6\n  x9 <- lengths(input) == 6 & !x6 & !x0\n  x5 <- lengths(input) == 5 & setdiff_length(input, x6) == 1\n  x3 <- lengths(input) == 5 & setdiff_length(input, x9) == 1 & !x5\n  x2 <- lengths(input) == 5 & !x5 & !x3\n  \n  cont <- list(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) %>%\n    map(~ input[[which(.x)]]) %>%\n    map(sort)\n  \n  output %>%\n    match(cont) %>%\n    magrittr::subtract(., 1) %>%\n    str_c(collapse = \"\") %>%\n    as.numeric()\n}\n\ndata %>%\n  mutate(res = map2_dbl(input, output, ~ solver(.x, .y))) %>%\n  summarise(sum = sum(res)) %>% \n  pull(sum) %>% \n  print()\n\n\n\n[1] 973292\n0.482 sec elapsed\n\nDay 9\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_table(here::here(\"2021\",\"day_09\",\"input_day09.txt\"), \n                    col_names = FALSE) %>%\n  rename(value = X1)\n\nfull_table <- input %>% \n  separate(value, into = str_glue(\"coord{seq(0,10)}\"), sep = \"\") %>% \n  mutate(across(everything(), ~ as.numeric(.x))) %>% \n  rowid_to_column(\"row_no\") %>% \n  add_row(tibble(row_no = c(0, nrow(.) + 1))) %>% \n  mutate(across(everything(), ~ replace_na(.x, Inf)),\n         coord_last = Inf) %>% \n  arrange(row_no)\n\nrow_wise_table <- full_table %>% \n  pivot_longer(starts_with(\"coord\"), names_to = \"column_no\") %>% \n  group_by(column_no) %>% \n  mutate(lag_value = lag(value),\n         lead_value = lead(value),\n         low_point_row = ifelse(value < lag_value & value < lead_value, \n                                yes = TRUE, no = FALSE)) %>%\n  select(row_no, column_no, value, low_point_row)\n\ncol_wise_table <- full_table %>% \n  pivot_longer(starts_with(\"coord\"), names_to = \"column_no\") %>% \n  group_by(row_no) %>% \n  mutate(lag_value = lag(value),\n         lead_value = lead(value),\n         low_point_col = ifelse(value < lag_value & value < lead_value, \n                                yes = TRUE, no = FALSE)) %>% \n  select(row_no, column_no, value, low_point_col)\n\n\ninner_join(col_wise_table, row_wise_table) %>%\n  filter(low_point_col, low_point_row) %>% \n  ungroup() %>% \n  mutate(value = value + 1) %>% \n  summarise(sum = sum(value)) %>% \n  pull(sum) %>% \n  print()\n\n\n\n[1] 128\n0.176 sec elapsed\n\nPart 2\nGot stuck here, and once I found this amazingly clever solution from Ildikó Czeller using {igraph}. I wanted to know how this worked, and then I learned from Jarosław Nirski about a similar solution using {tidygraph}, which is very neat:\n\n\nlibrary(tidyverse)\n\ninput <- read_table(here::here(\"2021\",\"day_09\",\"input_day09.txt\"), \n                    col_names = FALSE) %>%\n  rename(value = X1)\n\ndata_long <- input %>% \n  rowid_to_column(\"row_no\") %>% \n  separate_rows(value, sep = \"\", convert = TRUE) %>% \n  filter(!is.na(value)) %>% \n  group_by(row_no) %>% \n  mutate(col_no = row_number()) %>% \n  ungroup() %>% \n  select(value, row_no, col_no)\n\ntidygraph::create_lattice(c(100, 100)) %>%\n  mutate(!!!data_long) %>%\n  filter(value != 9) %>%\n  mutate(group = tidygraph::group_components()) %>%\n  as_tibble() %>%\n  count(group, sort = TRUE) %>%\n  head(3) %>%\n  pull(n) %>%\n  prod()\n\n\n\n0.165 sec elapsed\n\nDay 10\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_table(here::here(\"2021\",\"day_10\",\"input_day10.txt\"), \n                    col_names = \"syntax\")\n\nfull_patterns <- c(\"\\\\(\\\\)\",\"\\\\[\\\\]\",\"\\\\{\\\\}\",\"\\\\<\\\\>\")\n\nsymbols <- tibble(symbols = c(\"(\",\"[\",\"{\",\"<\",\")\",\"]\",\"}\",\">\"),\n                  valid = c(rep(TRUE, 4), rep(FALSE, 4)))\n\npoints <- c(\")\" = 3, \"]\" = 57, \"}\" = 1197, \">\" = 25137) %>% \n  enframe()\n\ninput %>% \n  mutate(nchar = max(nchar(syntax))) %>% \n  mutate(syntax = reduce(seq(nchar), .init = syntax,\n                         ~ str_remove_all(.x, str_c(full_patterns, \n                                                    collapse = \"|\")))) %>% \n  mutate(symbols = str_split(syntax, \"\")) %>% \n  unnest(symbols) %>%\n  group_by(syntax) %>% \n  mutate(position = row_number()) %>% \n  left_join(symbols) %>% \n  filter(!valid) %>% \n  slice_min(position) %>% \n  ungroup() %>% \n  left_join(points, by = c(\"symbols\" = \"name\")) %>% \n  summarise(total = sum(value)) %>% \n  pull(total) %>% \n  print()\n\n\n\n[1] 321237\n0.142 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- read_table(here::here(\"2021\",\"day_10\",\"input_day10.txt\"), \n                    col_names = \"syntax\")\n\nfull_patterns <- c(\"\\\\(\\\\)\",\"\\\\[\\\\]\",\"\\\\{\\\\}\",\"\\\\<\\\\>\")\n\nsymbols <- tibble(symbols = c(\"(\",\"[\",\"{\",\"<\",\")\",\"]\",\"}\",\">\"),\n                  valid = c(rep(TRUE, 4), rep(FALSE, 4)))\n\npoints <- c(\")\" = 1, \"]\" = 2, \"}\" = 3, \">\" = 4) %>% \n  enframe()\n\nfull_patterns <- c(\"\\\\(\\\\)\",\"\\\\[\\\\]\",\"\\\\{\\\\}\",\"\\\\<\\\\>\")\n\npairs <- tibble(open = c(\"(\",\"[\",\"{\",\"<\"),\n                close = c(\")\",\"]\",\"}\",\">\"))\n\ncalc_score <- function(scores) {\n  \n  tot_score <- reduce(seq_along(scores), ~ .x * 5 + scores[.y], .init = 0)\n  return(tot_score)\n  \n}\n\ninput %>% \n  mutate(nchar = max(nchar(syntax))) %>% \n  mutate(syntax = reduce(seq(nchar), .init = syntax,\n                         ~ str_remove_all(.x, str_c(full_patterns, \n                                                    collapse = \"|\")))) %>% \n  mutate(symbols = str_split(syntax, \"\")) %>% \n  unnest(symbols) %>%\n  group_by(syntax) %>% \n  left_join(symbols) %>% \n  filter(all(valid)) %>% \n  mutate(inv_symbols = rev(symbols)) %>% \n  left_join(pairs, by = c(\"inv_symbols\" = \"open\")) %>% \n  mutate(close_syntax = str_c(close, collapse = \"\")) %>% \n  left_join(points, by = c(\"close\" = \"name\")) %>% \n  select(syntax,value) %>% \n  nest(scores = value) %>% \n  mutate(scores = map(scores, ~ as_vector(.x)),\n         tot_score = map_dbl(scores, ~ calc_score(.x))) %>% \n  ungroup() %>% \n  summarise(median_score = median(tot_score)) %>% \n  pull(median_score) %>% \n  print()\n\n\n\n[1] 2360030859\n0.184 sec elapsed\n\nDay 11\nNope, not a chance…\nDay 12\nNo idea, sorry!\nDay 13\nPart 1\n\n\nlibrary(tidyverse)\n\ninput_paper <- read_csv(here::here(\"2021\",\"day_13\",\"input_day13.txt\"), \n                        col_names = c(\"x\",\"y\"), n_max = 1004)\ninput_folds <- read_delim(here::here(\"2021\",\"day_13\",\"input_day13.txt\"), \n                          delim = \"=\", \n                          col_names = c(\"fold_direction\", \"fold_loc\"), \n                          skip = 1005) %>% \n  mutate(fold_direction = str_extract(fold_direction, \"[x|y]\"))\n\nfold_paper <- function(df, instructions, step = 1) {\n  \n  dir <- instructions %>% \n    slice(step) %>% \n    pull(fold_direction)\n  \n  loc <- instructions %>% \n    slice(step) %>% \n    pull(fold_loc)\n  \n  folded_paper <- df %>% \n    mutate(x = if_else(x <= loc | dir == \"y\", x, 2 * loc - x),\n           y = if_else(y <= loc | dir == \"x\", y, 2 * loc - y)) %>% \n    distinct(x, y)\n  \n  return(folded_paper)\n  \n}\n\nfold_paper(input_paper, input_folds) %>% \n  count() %>% \n  pull(n) %>% \n  print()\n\n\n\n[1] 847\n0.198 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput_paper <- read_csv(here::here(\"2021\",\"day_13\",\"input_day13.txt\"), \n                        col_names = c(\"x\",\"y\"), n_max = 1004)\ninput_folds <- read_delim(here::here(\"2021\",\"day_13\",\"input_day13.txt\"), \n                          delim = \"=\", \n                          col_names = c(\"fold_direction\", \"fold_loc\"), \n                          skip = 1005) %>% \n  mutate(fold_direction = str_extract(fold_direction, \"[x|y]\"))\n\nfold_paper <- function(df, instructions, step = 1) {\n  \n  dir <- instructions %>% \n    slice(step) %>% \n    pull(fold_direction)\n  \n  loc <- instructions %>% \n    slice(step) %>% \n    pull(fold_loc)\n  \n  folded_paper <- df %>% \n    mutate(x = if_else(x <= loc | dir == \"y\", x, 2 * loc - x),\n           y = if_else(y <= loc | dir == \"x\", y, 2 * loc - y)) %>% \n    distinct(x, y)\n  \n  return(folded_paper)\n  \n}\n\nreduce(seq(nrow(input_folds)), ~ fold_paper(.x, input_folds, step = .y), \n       .init = input_paper) %>% \n  mutate(dot = \"#\") %>% \n  ggplot(aes(x = x, y = y)) +\n  geom_tile(fill = \"#f2f2f2\") +\n  geom_text(aes(label = dot), color = \"#b3b3b3\", size = 8) +\n  scale_y_reverse() +\n  coord_equal() + \n  theme_void() + \n  theme(plot.margin = margin(rep(10,4), unit = \"mm\"),\n        plot.background = element_rect(fill = \"#0f0f23\"))\n\nggsave(here::here(\"2021\", \"day_13\", \"plot_day13_pt2.png\"), last_plot(), \n       height = 3, width = 8, dpi = 300)\n\n\n\n0.377 sec elapsed\n\n\nDay 14\nPart 1\nWith some help once again from Ildikó Czeller 🙌!\n\n\nlibrary(tidyverse)\n\ninput_sequence <- read_lines(here::here(\"2021\",\"day_14\",\"input_day14.txt\"), \n                             n_max = 1)\ninput_rules <- read_delim(here::here(\"2021\",\"day_14\",\"input_day14.txt\"), \n                          delim = \"->\",  skip = 2, \n                          col_names = c(\"pair\",\"insert\")) %>% \n  mutate(across(everything(), ~ str_trim(.x)))\n\nrules <- input_rules %>% \n  mutate(pair_chars = str_split(pair, \"\")) %>% \n  unnest_wider(pair_chars, names_sep = \"\") %>% \n  mutate(new_pair1 = str_glue(\"{pair_chars1}{insert}\"), \n         new_pair2 = str_glue(\"{insert}{pair_chars2}\")) %>% \n  rowwise() %>% \n  mutate(new_pair = list(c(new_pair1, new_pair2))) %>% \n  select(pair, new_pair) %>% \n  ungroup()\n\npairs_from_string <- function(string) {\n  ind_chars <- str_split(string, \"\") %>% \n    unlist()\n  pairs <- head(str_glue(\"{ind_chars}{lead(ind_chars)}\"), -1)\n  return(pairs)\n}\n\ninitial_pair_frequencies <- input_sequence %>% \n  pairs_from_string() %>% \n  as_tibble() %>% \n  rename(pair = value) %>% \n  count(pair, name = \"freq\")\n\napply_rules <- function(df) {\n  \n  out <- df %>% \n    inner_join(rules, by = \"pair\") %>% \n    unnest_longer(new_pair) %>% \n    group_by(new_pair) %>% \n    summarize(freq = sum(freq)) %>% \n    rename(pair = new_pair)\n  return(out)\n  \n}\n\nreduce(seq(10), ~ apply_rules(.x), .init = initial_pair_frequencies) %>% \n  separate_rows(pair, sep = \"\") %>% \n  filter(pair != \"\") %>% \n  group_by(pair) %>% \n  summarise(freq = ceiling(sum(freq) / 2)) %>% \n  ungroup() %>% \n  summarise(diff = max(freq) - min(freq)) %>% \n  pull(diff) %>% \n  print()\n\n\n\n[1] 2068\n0.41 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput_sequence <- read_lines(here::here(\"2021\",\"day_14\",\"input_day14.txt\"), \n                             n_max = 1)\ninput_rules <- read_delim(here::here(\"2021\",\"day_14\",\"input_day14.txt\"), \n                          delim = \"->\",  skip = 2, \n                          col_names = c(\"pair\",\"insert\")) %>% \n  mutate(across(everything(), ~ str_trim(.x)))\n\nrules <- input_rules %>% \n  mutate(pair_chars = str_split(pair, \"\")) %>% \n  unnest_wider(pair_chars, names_sep = \"\") %>% \n  mutate(new_pair1 = str_glue(\"{pair_chars1}{insert}\"), \n         new_pair2 = str_glue(\"{insert}{pair_chars2}\")) %>% \n  rowwise() %>% \n  mutate(new_pair = list(c(new_pair1, new_pair2))) %>% \n  select(pair, new_pair) %>% \n  ungroup()\n\npairs_from_string <- function(string) {\n  ind_chars <- str_split(string, \"\") %>% \n    unlist()\n  pairs <- head(str_glue(\"{ind_chars}{lead(ind_chars)}\"), -1)\n  return(pairs)\n}\n\ninitial_pair_frequencies <- input_sequence %>% \n  pairs_from_string() %>% \n  as_tibble() %>% \n  rename(pair = value) %>% \n  count(pair, name = \"freq\")\n\napply_rules <- function(df) {\n  \n  out <- df %>% \n    inner_join(rules, by = \"pair\") %>% \n    unnest_longer(new_pair) %>% \n    group_by(new_pair) %>% \n    summarize(freq = sum(freq)) %>% \n    rename(pair = new_pair)\n  return(out)\n  \n}\n\noptions(scipen = 999)\n\nreduce(seq(40), ~ apply_rules(.x), .init = initial_pair_frequencies) %>% \n  separate_rows(pair, sep = \"\") %>% \n  filter(pair != \"\") %>% \n  group_by(pair) %>% \n  summarise(freq = ceiling(sum(freq) / 2)) %>% \n  ungroup() %>% \n  summarise(diff = max(freq) - min(freq)) %>% \n  pull(diff) %>% \n  print()\n\n\n\n[1] 2158894777814\n1.144 sec elapsed\n\nDay 15\nSorry! Guess I need to dive into {tidygraph} a bit more.\nDay 16\nNope, no idea!\nDay 17\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_lines(here::here(\"2021\",\"day_17\",\"input_day17.txt\")) %>% \n  str_extract_all(\"-?[0-9]+\", simplify = TRUE) %>% \n  as.numeric() %>% \n  tibble(value = .) %>% \n  mutate(pos = c('xmin', 'xmax', 'ymin', 'ymax')) %>% \n  pivot_wider(names_from = pos, values_from = value)\n\ninput %>% \n  mutate(ylim = (abs(ymin) - 1) * abs(ymin) / 2) %>% \n  pull(ylim) %>% \n  print()\n\n\n\n[1] 5460\n0.047 sec elapsed\n\nPart 2\nI really admire Ildikó Czeller’s neat and tidy solution here, which (with some trial-and-error) worked beautifully!\n\n\nlibrary(tidyverse)\n\ninput <- read_lines(here::here(\"2021\",\"day_17\",\"input_day17.txt\")) %>% \n  str_extract_all(\"-?[0-9]+\", simplify = TRUE) %>% \n  as.numeric() %>% \n  tibble(value = .) %>% \n  mutate(pos = c('xmin', 'xmax', 'ymin', 'ymax')) %>% \n  pivot_wider(names_from = pos, values_from = value)\n\npositions <- crossing(vx = seq(0, input[[\"xmax\"]]), \n                      vy = seq(input[[\"ymin\"]], 250), \n                      s = seq(0, 500)) %>%\n  mutate(dx = pmax(vx - s, 0),\n         dy = vy - s) %>% \n  group_by(vx, vy) %>% \n  mutate(x = cumsum(dx),\n         y = cumsum(dy)) %>% \n  ungroup()\n\npositions %>%\n  filter(x >= input[[\"xmin\"]] & x <= input[[\"xmax\"]] & \n           y >= input[[\"ymin\"]] & y <= input[[\"ymax\"]]) %>%\n  distinct(vx, vy) %>% \n  count() %>% \n  pull(n) %>% \n  print()\n\n\n\n[1] 3618\n9.388 sec elapsed\n\nDay 18\nYeah, I’m getting out of my depth here.\nDay 19\nNope, sorry!\nDay 20\nCool puzzle, but I’m not sure how to solve it, and I don’t want to use MATLAB either.\nDay 21\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_delim(here::here(\"2021\",\"day_21\",\"input_day21.txt\"), delim = \":\", \n                    col_names = c(\"player\",\"start_pos\")) %>% \n  mutate(across(everything(), ~ parse_number(.x))) %>% \n  pull(start_pos)\n\nscores <- c(0, 0)\ndie_roll <- 0\n\ndie_value <- function(die_roll) {\n  value <- if_else(die_roll %% 100 == 0, 100, die_roll %% 100)\n  return(value)\n}\n\nplace_value <- function(place_idx) {\n  value <- if_else(place_idx %% 10 == 0, 10, place_idx %% 10)\n  return(value)\n}\n\nroll_for_player <- function(player) {\n  die_sum <- sum(die_value(die_roll + seq(3)))\n  die_roll <<- die_roll + 3\n  scores[player] <<- scores[player] + place_value(input[player] + die_sum)\n  input[player] <<- place_value(input[player] + die_sum)\n}\n\nwhile (max(scores) < 1000) {\n  roll_for_player(1)\n  if (max(scores) < 1000) {\n    roll_for_player(2)\n  }\n}\n\nprint(min(scores) * die_roll)\n\n\n\n[1] 1002474\n0.114 sec elapsed\n\nPart 2\nSorry, part 1 was I could manage here.\nDay 22\nNo idea!\nDay 23\nDefinitely too complicated for me at this stage.\nDay 24\nSorry, definitely too complex for me.\nDay 25\nMerry Christmas! 🎄 No solution from me today either, both because of time and because of complexity. This was fun though, I’m looking forward to next year!\n\n\n\n\n",
      "last_modified": "2022-12-03T11:19:51+01:00"
    },
    {
      "path": "2022.html",
      "title": "My 2022 Attempts",
      "author": [],
      "contents": "\n\n\n\n\n\nDay 1\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_csv(here::here(\"2022\", \"day_01\", \"input_day01.txt\"), \n                  col_names = \"calories\", skip_empty_rows = FALSE)\n\ninput |> \n  mutate(empty = ifelse(is.na(calories), 1, 0),\n         elf = cumsum(empty)) |> \n  drop_na() |> \n  group_by(elf) |> \n  summarise(total_calories = sum(calories)) |>\n  slice_max(total_calories) |> \n  pull(total_calories) |> \n  print()\n\n\n\n[1] 72602\n0.272 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- read_csv(here::here(\"2022\", \"day_01\", \"input_day01.txt\"), \n                  col_names = \"calories\", skip_empty_rows = FALSE)\n\ninput |> \n  mutate(empty = ifelse(is.na(calories), 1, 0),\n         elf = cumsum(empty)) |> \n  drop_na() |> \n  group_by(elf) |> \n  summarise(total_calories = sum(calories)) |>\n  slice_max(total_calories, n = 3) |> \n  summarise(total_calories = sum(total_calories)) |> \n  pull(total_calories) |> \n  print()\n\n\n\n[1] 207410\n0.079 sec elapsed\n\nDay 2\nDidn’t have much time, so all I managed in the time was a series of case_when()’s. If I revisit I might use matrices instead.\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_table(here::here(\"2022\", \"day_02\", \"input_day02.txt\"), \n                    col_names = c(\"x\", \"y\"))\n\ninput |> \n  rename(opp = x,\n         me = y) |> \n  mutate(opp_base_score = case_when(opp == \"A\" ~ 1,\n                                    opp == \"B\" ~ 2,\n                                    opp == \"C\" ~ 3),\n         me_base_score = case_when(me == \"X\" ~ 1,\n                                   me == \"Y\" ~ 2,\n                                   me == \"Z\" ~ 3),\n         score_diff = me_base_score - opp_base_score,\n         me_turn_score = case_when(score_diff == -1 | score_diff == 2 ~ 0,\n                                   score_diff == 0 ~ 3,\n                                   score_diff == 1 | score_diff == -2 ~ 6),\n         me_game_score = me_base_score + me_turn_score) |> \n  summarise(total_score = sum(me_game_score)) |> \n  pull(total_score) |> \n  print()\n\n\n\n[1] 14531\n0.108 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- read_table(here::here(\"2022\", \"day_02\", \"input_day02.txt\"), \n                    col_names = c(\"x\", \"y\"))\n\ninput |> \n  rename(opp = x,\n         outcome = y) |> \n  mutate(opp_base_score = case_when(opp == \"A\" ~ 1,\n                                    opp == \"B\" ~ 2,\n                                    opp == \"C\" ~ 3),\n         me_turn_score = case_when(outcome == \"X\" ~ 0,\n                                   outcome == \"Y\" ~ 3,\n                                   outcome == \"Z\" ~ 6),\n         me_base_score = case_when(me_turn_score == 3 ~ opp_base_score,\n                                   me_turn_score == 0 & \n                                     opp_base_score > 1 ~ opp_base_score - 1,\n                                   me_turn_score == 0 & opp_base_score == 1 ~ 3,\n                                   me_turn_score == 6 & \n                                     opp_base_score < 3 ~ opp_base_score + 1,\n                                   me_turn_score == 6 & opp_base_score == 3 ~ 1),\n         me_game_score = me_turn_score + me_base_score) |> \n  summarise(total_score = sum(me_game_score)) |> \n  pull(total_score) |> \n  print()\n\n\n\n[1] 11258\n0.063 sec elapsed\n\nDay 3\nWould have made for a nice exercise in Python, but who doesn’t love a good regex challenge? 😊\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_table(here::here(\"2022\", \"day_03\", \"input_day03.txt\"), \n                    col_names = \"rucksack\")\n\npriority_values <- tibble(char = c(letters, LETTERS)) |> \n  mutate(priority = seq(n()))\n\ninput |> \n  mutate(nitems = nchar(rucksack),\n         comp1 = str_sub(rucksack, 1, nitems/2),\n         comp2 = str_sub(rucksack, nitems/2 + 1, nitems),\n         comp1_regex = map_chr(strsplit(comp1, \"\"), str_c, collapse = \"|\"),\n         common = str_extract(comp2, comp1_regex)) |> \n  left_join(priority_values, by = c(\"common\" = \"char\")) |> \n  summarise(sum = sum(priority)) |> \n  pull(sum) |> \n  print()\n\n\n\n[1] 7793\n0.041 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- read_table(here::here(\"2022\", \"day_03\", \"input_day03.txt\"), \n                    col_names = \"rucksack\")\n\npriority_values <- tibble(char = c(letters, LETTERS)) |> \n  mutate(priority = seq(n()))\n\ninput |> \n  mutate(group = rep(seq(unique(n())/3), each = 3)) |> \n  group_by(group) |> \n  summarise(group_items = str_c(rucksack, collapse = \"-\")) |> \n  separate(group_items, into = c(\"comp1\", \"comp2\", \"comp3\")) |> \n  mutate(comp1_regex = map_chr(strsplit(comp1, \"\"), str_c, collapse = \"|\"),\n         common_12 = str_extract_all(comp2, comp1_regex),\n         comp12_regex = map_chr(common_12, str_c, collapse = \"|\"),\n         common_all = str_extract(comp3, comp12_regex)) |> \n  left_join(priority_values, by = c(\"common_all\" = \"char\")) |> \n  summarise(sum = sum(priority)) |> \n  pull(sum) |> \n  print()\n\n\n\n[1] 2499\n0.06 sec elapsed\n\nDay 4\nDay 5\nDay 6\nDay 7\nDay 8\nDay 9\nDay 10\nDay 11\nDay 12\nDay 13\nDay 14\nDay 15\nDay 16\nDay 17\nDay 18\nDay 19\nDay 20\nDay 21\nDay 22\nDay 23\nDay 24\nDay 25\n\n\n\n\n",
      "last_modified": "2022-12-03T11:19:54+01:00"
    },
    {
      "path": "index.html",
      "title": "Advent of Code",
      "description": "My solutions for [Advent of Code](https://adventofcode.com)\n",
      "author": [],
      "contents": "\n\n\n2021\n2022\n\nWebsite design by Emil Hvitveldt\n\n\n\n",
      "last_modified": "2022-12-03T11:19:54+01:00"
    }
  ],
  "collections": []
}
